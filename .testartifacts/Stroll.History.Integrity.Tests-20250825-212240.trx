<?xml version="1.0" encoding="utf-8"?>
<TestRun id="3e37220d-0987-4ce3-bba1-7c254cd9c37e" name="revanur@SONAKSHI 2025-08-25 21:22:43" runUser="SONAKSHI\revanur" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-08-25T21:22:44.0032630+01:00" queuing="2025-08-25T21:22:44.0032634+01:00" start="2025-08-25T21:22:42.4043680+01:00" finish="2025-08-25T21:24:14.0867606+01:00" />
  <TestSettings name="default" id="0cacfeef-7f70-410a-a749-80fbeee75257">
    <Deployment runDeploymentRoot="revanur_SONAKSHI_2025-08-25_21_22_43" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="130b5488-3a1a-4790-9d73-c2da60bbb88e" testId="b0cb56fa-2d51-d0d1-ff37-a047257de28f" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests" computerName="SONAKSHI" duration="00:00:02.2320687" startTime="2025-08-25T21:22:45.0500819+01:00" endTime="2025-08-25T21:22:45.0500821+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="130b5488-3a1a-4790-9d73-c2da60bbb88e">
      <Output>
        <ErrorInfo>
          <Message>Expected avgLatency to be less than or equal to 100.0 because Initialization should not severely impact response times, but found 132.8 (difference of 32.80000000000001).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 267&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c40e845c-5202-4dce-96d5-2ab7943127d5" testId="070eb660-3594-4f33-e767-639f4867d099" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.MemoryUsage_UnderLoad_MustNotExceedLimits" computerName="SONAKSHI" duration="00:00:06.2364531" startTime="2025-08-25T21:22:51.4966381+01:00" endTime="2025-08-25T21:22:51.4966388+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c40e845c-5202-4dce-96d5-2ab7943127d5">
      <Output>
        <StdOut>Memory Usage: Avg=2.5MB, Max=2MB</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f1e4452e-7486-441a-a4e3-766f6422db86" testId="698150cf-a3bf-0a44-9fc6-9e4a7cd1afaf" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;USO&quot;)" computerName="SONAKSHI" duration="00:00:00.1481257" startTime="2025-08-25T21:22:43.9521971+01:00" endTime="2025-08-25T21:22:43.9521974+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1e4452e-7486-441a-a4e3-766f6422db86">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 137&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 137&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="69308c66-0e78-4420-99e4-2d2b3a8d15c5" testId="02b1d2f1-3459-ba65-f8fa-b0b332fd1ac5" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;SPY&quot;)" computerName="SONAKSHI" duration="00:00:00.1311707" startTime="2025-08-25T21:22:44.8484781+01:00" endTime="2025-08-25T21:22:44.8484783+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="69308c66-0e78-4420-99e4-2d2b3a8d15c5">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 54&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d50b9814-c98c-4250-8e5d-f2097280acfa" testId="669a21aa-c949-333b-2581-d8d519a421f7" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, date: &quot;2024-01-31&quot;, scenario: &quot;monthly&quot;)" computerName="SONAKSHI" duration="00:00:00.0204705" startTime="2025-08-25T21:24:03.3109877+01:00" endTime="2025-08-25T21:24:03.3109881+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d50b9814-c98c-4250-8e5d-f2097280acfa">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because get-options monthly must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(String symbol, String date, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 133&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7bfdb47a-b594-4ee4-a8c9-2572911fe7e4" testId="f12d43d6-09ca-94cc-3081-2e6b5b79a2f5" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently" computerName="SONAKSHI" duration="00:00:05.0704431" startTime="2025-08-25T21:23:38.4148717+01:00" endTime="2025-08-25T21:23:38.4148719+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7bfdb47a-b594-4ee4-a8c9-2572911fe7e4">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.IO.IOException : Pipe is broken.</Message>
          <StackTrace>   at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
   at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
   at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 419&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 246&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="63190695-a38b-4d63-8e8c-554ffb38eb45" testId="a1abdd3e-f3c6-1c14-6064-4f2dd0d24d96" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;ERY&quot;)" computerName="SONAKSHI" duration="00:00:00.2659665" startTime="2025-08-25T21:22:45.7479976+01:00" endTime="2025-08-25T21:22:45.7479980+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="63190695-a38b-4d63-8e8c-554ffb38eb45" />
    <UnitTestResult executionId="2f10102f-771c-4135-87a7-4170ec3bc6db" testId="b82280b4-dbf6-d42b-a3fb-284005534d07" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections" computerName="SONAKSHI" duration="00:00:10.4851919" startTime="2025-08-25T21:23:54.0093389+01:00" endTime="2025-08-25T21:23:54.0093404+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2f10102f-771c-4135-87a7-4170ec3bc6db">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Client connection failed: Pipe is broken.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Client connection failed: Pipe is broken.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Client connection failed: Pipe is broken.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Client connection failed: Pipe is broken.&#xD;
Client connection failed: Pipe is broken.&#xD;
Client connection failed: Pipe is broken.&#xD;
Client connection failed: Pipe is broken.&#xD;
Client connection failed: Pipe is broken.</StdOut>
        <ErrorInfo>
          <Message>System.InvalidOperationException : Sequence contains no elements</Message>
          <StackTrace>   at System.Linq.ThrowHelper.ThrowNoElementsException()&#xD;
   at System.Linq.Enumerable.Average[TSource,TSelector,TAccumulator,TResult](IEnumerable`1 source, Func`2 selector)&#xD;
   at System.Linq.Enumerable.Average[TSource](IEnumerable`1 source, Func`2 selector)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 215&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2c125041-b8bb-400d-bf15-75f9fe3b7e8a" testId="9720b5d8-629d-49df-67fd-acba0735f3a3" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses" computerName="SONAKSHI" duration="00:00:05.0106483" startTime="2025-08-25T21:23:33.3434985+01:00" endTime="2025-08-25T21:23:33.3434988+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2c125041-b8bb-400d-bf15-75f9fe3b7e8a">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.IO.IOException : Pipe is broken.</Message>
          <StackTrace>   at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
   at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
   at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 419&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 321&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6902195-cdca-45df-bcea-d758683b463c" testId="c60bb786-dacb-4f91-d8c0-17001cfed7a7" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat" computerName="SONAKSHI" duration="00:00:00.1479629" startTime="2025-08-25T21:22:44.5351331+01:00" endTime="2025-08-25T21:22:44.5351333+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6902195-cdca-45df-bcea-d758683b463c">
      <Output>
        <StdOut>Command: invalid-command --badarg value&#xD;
Exit Code: 64&#xD;
Execution Time: 146ms&#xD;
Output: &#xD;
Error: {&#xD;
  "schema": "stroll.history.v1",&#xD;
  "ok": false,&#xD;
  "error": {&#xD;
    "code": "USAGE",&#xD;
    "message": "unknown command \u0027invalid-command\u0027",&#xD;
    "hint": "try: stroll.history discover"&#xD;
  }&#xD;
}</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 2 because invalid arguments should return exit code 2, but found 64 (difference of 62).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 199&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f2a37aa4-4154-43d6-aaec-9d53a0fb9cf3" testId="d5b7c5d1-908c-90c4-0c53-379ba6ea3959" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;ERX&quot;)" computerName="SONAKSHI" duration="00:00:00.2331673" startTime="2025-08-25T21:22:46.2948615+01:00" endTime="2025-08-25T21:22:46.2948618+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f2a37aa4-4154-43d6-aaec-9d53a0fb9cf3" />
    <UnitTestResult executionId="11c5fb67-0828-4347-ae2d-01e2e4b11aad" testId="2a98c4fa-8bce-0aac-f1e5-20629f4fcd20" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;QQQ&quot;)" computerName="SONAKSHI" duration="00:00:00.1572140" startTime="2025-08-25T21:22:44.1099411+01:00" endTime="2025-08-25T21:22:44.1099412+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="11c5fb67-0828-4347-ae2d-01e2e4b11aad">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 137&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 137&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ba118b34-6eb1-48b1-b678-41da17b9633d" testId="8c252c2d-052d-8947-948e-0317943dbcb9" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, date: &quot;2024-01-19&quot;, scenario: &quot;weekly&quot;)" computerName="SONAKSHI" duration="00:00:00.0098722" startTime="2025-08-25T21:24:03.2901418+01:00" endTime="2025-08-25T21:24:03.2901421+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ba118b34-6eb1-48b1-b678-41da17b9633d">
      <Output>
        <ErrorInfo>
          <Message>System.ComponentModel.Win32Exception : An error occurred trying to start process 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\..\..\..\..\Stroll.Historical\bin\Debug\net9.0\Stroll.Historical.exe' with working directory 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0'. Access is denied.</Message>
          <StackTrace>   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)&#xD;
   at System.Diagnostics.Process.Start()&#xD;
   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.ExecuteCliCommand(String arguments) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 319&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(String symbol, String date, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 130&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8dedaf4a-efb1-491c-ab7e-b94e086e7a6a" testId="345169e6-3dc3-afa2-a0a8-9fb2f1d400d2" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO" computerName="SONAKSHI" duration="00:00:02.4995319" startTime="2025-08-25T21:22:55.7352484+01:00" endTime="2025-08-25T21:22:55.7352487+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8dedaf4a-efb1-491c-ab7e-b94e086e7a6a">
      <Output>
        <StdOut>Process Spawn: P50=128ms, P95=148ms</StdOut>
        <ErrorInfo>
          <Message>Expected p50 to be less than or equal to 3L because Process spawn P50 must be ≤3ms, but found 128L (difference of 125).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 97&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="beb0146d-eb07-4df2-ad6f-f39d5a001c60" testId="0a60c8d7-ce2e-951c-8c65-0d1888537231" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO" computerName="SONAKSHI" duration="00:00:02.3506278" startTime="2025-08-25T21:22:45.1684143+01:00" endTime="2025-08-25T21:22:45.1684145+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="beb0146d-eb07-4df2-ad6f-f39d5a001c60">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because discover must succeed for baseline measurement, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 46&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="69257494-33a1-4bc7-98f4-4db8fefc04b9" testId="a97e8704-df43-aa55-d55e-cc7f9f54d62b" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO" computerName="SONAKSHI" duration="00:00:00.6374289" startTime="2025-08-25T21:22:43.4683176+01:00" endTime="2025-08-25T21:22:43.4683308+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="69257494-33a1-4bc7-98f4-4db8fefc04b9">
      <Output>
        <ErrorInfo>
          <Message>System.ComponentModel.Win32Exception : An error occurred trying to start process 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\..\..\..\..\Stroll.Historical\bin\Debug\net9.0\Stroll.Historical.exe' with working directory 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0'. Access is denied.</Message>
          <StackTrace>   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)&#xD;
   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.ExecuteCliCommand(String arguments) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 337&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 89&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f448daea-d4d5-42c2-85af-70ba677facfa" testId="d50dac0e-a7de-09cc-da1c-bc348c29be5f" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;XOP&quot;)" computerName="SONAKSHI" duration="00:00:00.1492432" startTime="2025-08-25T21:22:44.9976651+01:00" endTime="2025-08-25T21:22:44.9976655+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f448daea-d4d5-42c2-85af-70ba677facfa" />
    <UnitTestResult executionId="c3b69e92-eb04-4f9a-8e24-b0a2dd9e20ce" testId="bd89ac76-1178-a9a8-b539-d7abc58c5d5d" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle" computerName="SONAKSHI" duration="00:00:05.0827601" startTime="2025-08-25T21:23:43.5050225+01:00" endTime="2025-08-25T21:23:43.5050227+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3b69e92-eb04-4f9a-8e24-b0a2dd9e20ce">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.IO.IOException : Pipe is broken.</Message>
          <StackTrace>   at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
   at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
   at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 419&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 361&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2e50ac70-02e6-4dde-8fc2-c090ad6ea4d3" testId="dfe6ee38-021d-7fbf-62be-74dc8f7bd624" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;XLE&quot;)" computerName="SONAKSHI" duration="00:00:00.1416426" startTime="2025-08-25T21:22:44.2524306+01:00" endTime="2025-08-25T21:22:44.2524308+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2e50ac70-02e6-4dde-8fc2-c090ad6ea4d3">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 137&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 137&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="02f28f60-8ba0-4fe5-9bb9-378285eb02fb" testId="d9d5e9cb-812b-39a5-915f-74231facbaf3" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-15&quot;, to: &quot;2024-01-15&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_day&quot;)" computerName="SONAKSHI" duration="00:00:00.0316377" startTime="2025-08-25T21:22:45.2608912+01:00" endTime="2025-08-25T21:22:45.2608918+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="02f28f60-8ba0-4fe5-9bb9-378285eb02fb">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because get-bars single_day must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 90&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6a832b8f-48f6-43f2-828f-893bb5a8dac2" testId="34c2d878-9f9a-c3fb-f608-685427dd1ff8" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.MultiSymbol_ConsistentResponse_MustHaveSameSchema" computerName="SONAKSHI" duration="00:00:00.5939948" startTime="2025-08-25T21:22:47.4827669+01:00" endTime="2025-08-25T21:22:47.4827671+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6a832b8f-48f6-43f2-828f-893bb5a8dac2">
      <Output>
        <StdOut>Schema consistency validated across 3 symbols</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f6182e6c-b5e9-410f-ae7f-725d9e71b34c" testId="ab2b2a05-ed37-b373-0697-8aa7b21d8d5d" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-01&quot;, to: &quot;2024-01-07&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_week&quot;)" computerName="SONAKSHI" duration="00:00:00.0310041" startTime="2025-08-25T21:22:45.2279372+01:00" endTime="2025-08-25T21:22:45.2279376+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f6182e6c-b5e9-410f-ae7f-725d9e71b34c">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because get-bars single_week must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 90&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f17b9a0-1317-472e-8e1d-2da114d25a20" testId="34d94d2d-122b-5143-8b16-e37fc2f5b7f3" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Discover_MustReturnValidContractSchema" computerName="SONAKSHI" duration="00:00:00.1662101" startTime="2025-08-25T21:22:43.6320572+01:00" endTime="2025-08-25T21:22:43.6320580+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f17b9a0-1317-472e-8e1d-2da114d25a20">
      <Output>
        <StdOut>Command: discover&#xD;
Exit Code: 0&#xD;
Execution Time: 142ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"service":"stroll.history","version":"1.0.0","env":[{"name":"STROLL_DATA","desc":"dataset root override","required":false}],"commands":[{"name":"version","args":[]},{"name":"discover","args":[]},{"name":"list-datasets","args":[]},{"name":"get-bars","args":[{"name":"symbol","required":true},{"name":"from","required":true,"type":"yyyy-MM-dd"},{"name":"to","required":true,"type":"yyyy-MM-dd"},{"name":"granularity","required":false,"default":"1m","oneOf":["1m","5m","1d"]},{"name":"format","required":false,"default":"json","oneOf":["json","jsonl"]}]},{"name":"get-options","args":[{"name":"symbol","required":true},{"name":"date","required":true,"type":"yyyy-MM-dd"}]},{"name":"acquire-data","args":[{"name":"symbol","required":true},{"name":"from","required":true,"type":"yyyy-MM-dd"},{"name":"to","required":true,"type":"yyyy-MM-dd"},{"name":"interval","required":false,"default":"1d","oneOf":["1d","1h","30m","15m","5m","1m"]},{"name":"output","required":false,"default":"./data"}]},{"name":"provider-status","args":[{"name":"output","required":false,"default":"./data"}]}]}}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="01d5e36e-5228-401a-b123-46c513da908b" testId="d1046a89-ce94-3c20-cf55-15cedf399078" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients" computerName="SONAKSHI" duration="00:00:00.1830134" startTime="2025-08-25T21:22:55.9190143+01:00" endTime="2025-08-25T21:22:55.9190146+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="01d5e36e-5228-401a-b123-46c513da908b">
      <Output>
        <StdOut>Client 0: -1, 24ms&#xD;
Client 1: -1, 28ms&#xD;
Client 2: -1, 42ms&#xD;
Client 6: 0, 180ms&#xD;
Client 4: 0, 180ms&#xD;
Client 5: 0, 180ms&#xD;
Client 7: 0, 180ms&#xD;
Client 3: 0, 180ms</StdOut>
        <ErrorInfo>
          <Message>Expected successCount to be 8 because All concurrent requests must succeed, but found 5.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 238&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a922824c-7e33-45f8-acf9-008040c2f063" testId="a65e01be-e329-9ced-a231-8f240e9dbff3" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;SPY&quot;)" computerName="SONAKSHI" duration="00:00:00.1485080" startTime="2025-08-25T21:22:43.8034103+01:00" endTime="2025-08-25T21:22:43.8034110+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a922824c-7e33-45f8-acf9-008040c2f063">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 137&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 137&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="457d8a96-6544-447a-be55-97e7fdf2f41e" testId="6d82db8f-5e56-2998-5fc5-a4fc1c24ccd8" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;QQQ&quot;, date: &quot;2024-01-19&quot;, description: &quot;weekly&quot;)" computerName="SONAKSHI" duration="00:00:00.2476907" startTime="2025-08-25T21:22:46.8882717+01:00" endTime="2025-08-25T21:22:46.8882721+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="457d8a96-6544-447a-be55-97e7fdf2f41e" />
    <UnitTestResult executionId="4ae29800-ad8d-435c-90b1-9d80aaf6e065" testId="73faff17-d744-8883-57fa-d6a3005947d4" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;DRIP&quot;)" computerName="SONAKSHI" duration="00:00:00.0092568" startTime="2025-08-25T21:22:45.2726931+01:00" endTime="2025-08-25T21:22:45.2726936+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4ae29800-ad8d-435c-90b1-9d80aaf6e065">
      <Output>
        <StdOut>Oil/Energy symbol DRIP not available: Exit=-1, Output=</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be one of {0, 3} because DRIP should either succeed (0) or report no data (3), not fail completely, but found -1.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 167&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="efaf8223-3ce6-4cda-a121-42ddeb86554c" testId="547563c8-101e-3ed7-b3d3-ffeb50de455a" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;OILY&quot;)" computerName="SONAKSHI" duration="00:00:00.1522696" startTime="2025-08-25T21:22:45.9006182+01:00" endTime="2025-08-25T21:22:45.9006185+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="efaf8223-3ce6-4cda-a121-42ddeb86554c" />
    <UnitTestResult executionId="9898a9d2-e7df-4449-9864-8a78d29bc6fe" testId="24742c7d-d023-969a-bdc2-2d3c3debc16b" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears" computerName="SONAKSHI" duration="00:00:00.8354177" startTime="2025-08-25T21:22:43.6542814+01:00" endTime="2025-08-25T21:22:43.6542817+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9898a9d2-e7df-4449-9864-8a78d29bc6fe">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;LongTermData_Availability_MustSpanMultipleYears&gt;b__10_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 303&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 303&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d293b389-b9a7-4498-b562-1dc9080d24e7" testId="bf31a76f-3c4d-96bf-54e8-1fab0c1cb5d5" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.LoadTest_ConcurrentRequests_MustMaintainThroughputSLO" computerName="SONAKSHI" duration="00:01:06.0876866" startTime="2025-08-25T21:24:03.2798158+01:00" endTime="2025-08-25T21:24:03.2798168+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d293b389-b9a7-4498-b562-1dc9080d24e7">
      <Output>
        <StdOut>Load Test Results: 1498 successful requests, 0.00% error rate, 51.21ms avg latency</StdOut>
        <ErrorInfo>
          <Message>Expected avgLatency to be less than or equal to 25.0 because Average latency must be ≤25ms under concurrent load, but found 51.21 (difference of 26.21).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.LoadTest_ConcurrentRequests_MustMaintainThroughputSLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 203&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0a13ba11-51cd-43a2-b5d9-772d26dc0da5" testId="46f4fb9a-9ec3-3575-6a3e-f54dfe0e0e6b" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully" computerName="SONAKSHI" duration="00:00:09.9282678" startTime="2025-08-25T21:23:06.8467846+01:00" endTime="2025-08-25T21:23:06.8467849+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0a13ba11-51cd-43a2-b5d9-772d26dc0da5">
      <Output>
        <StdOut>Error Recovery: Success Rate=90.00%, Avg Latency=529.7ms</StdOut>
        <ErrorInfo>
          <Message>Expected avgLatency to be less than or equal to 50.0 because Average latency must recover to &lt;50ms, but found 529.6666666666666 (difference of 479.66666666666663).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 209&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b3703ea1-a14e-45db-a815-628eb3e0ca48" testId="f0453f9e-8f1b-6bc5-2f7d-f889f91dca59" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation" computerName="SONAKSHI" duration="00:00:00.4093360" startTime="2025-08-25T21:22:44.2189345+01:00" endTime="2025-08-25T21:22:44.2189346+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b3703ea1-a14e-45db-a815-628eb3e0ca48">
      <Output>
        <StdOut>Command: provider-status&#xD;
Exit Code: 0&#xD;
Execution Time: 406ms&#xD;
Output: info: Stroll.Historical.DataAcquisitionEngine[0]&#xD;
      Added Local Historical Data provider&#xD;
info: Stroll.Historical.DataAcquisitionEngine[0]&#xD;
      Added Yahoo Finance provider&#xD;
?? Data Provider Status:&#xD;
&#xD;
? ?? Local Historical Data (Priority: 0)&#xD;
   Available: True&#xD;
   Healthy: False&#xD;
   Response Time: 2ms&#xD;
   Rate Limit: 2147483647/2147483647 per minute&#xD;
&#xD;
? ?? Yahoo Finance (Priority: 1)&#xD;
   Available: True&#xD;
   Healthy: False&#xD;
   Response Time: 217ms&#xD;
   Rate Limit: 30/30 per minute</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExecutionTimeMs to be less than or equal to 10L because provider-status must complete in &lt;10ms, but found 406L (difference of 396).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 172&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b6183abd-dd06-4553-be2e-3d9934033c81" testId="67affca7-d2a3-f2c9-5a36-dcf803e169a1" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits" computerName="SONAKSHI" duration="00:00:06.3076216" startTime="2025-08-25T21:23:13.1555113+01:00" endTime="2025-08-25T21:23:13.1555115+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b6183abd-dd06-4553-be2e-3d9934033c81">
      <Output>
        <ErrorInfo>
          <Message>System.InvalidOperationException : Sequence contains no elements</Message>
          <StackTrace>   at System.Linq.ThrowHelper.ThrowNoElementsException()&#xD;
   at System.Linq.Enumerable.Average[TSource,TAccumulator,TResult](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 170&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0bd294cc-d769-42d2-8f8a-c5c912994e00" testId="1660c8b5-3c0d-b313-cd84-8dbfedaee52e" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat" computerName="SONAKSHI" duration="00:00:10.0270948" startTime="2025-08-25T21:23:21.0769248+01:00" endTime="2025-08-25T21:23:21.0769251+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0bd294cc-d769-42d2-8f8a-c5c912994e00">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history.server failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.InvalidOperationException : Could not connect to any IPC pipe</Message>
          <StackTrace>   at Stroll.History.Integrity.Tests.IpcContractTests.ConnectToIpcServer(Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 409&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 269&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="68e01bb7-9194-42d3-bb00-cbe5cc3f8e3f" testId="77a4f4e8-bb0c-c2d6-caf9-3aaae7127b49" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;USO&quot;)" computerName="SONAKSHI" duration="00:00:00.1603584" startTime="2025-08-25T21:22:46.0613798+01:00" endTime="2025-08-25T21:22:46.0613801+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="68e01bb7-9194-42d3-bb00-cbe5cc3f8e3f" />
    <UnitTestResult executionId="c38e68ca-a4d2-4da6-bf44-26e2c0158911" testId="a3cc2a23-de32-b194-4da8-ac2edc918fbd" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.ColdStart_Performance_MustMeetBootstrapSLO" computerName="SONAKSHI" duration="00:00:05.6942833" startTime="2025-08-25T21:22:57.1914037+01:00" endTime="2025-08-25T21:22:57.1914041+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c38e68ca-a4d2-4da6-bf44-26e2c0158911">
      <Output>
        <StdOut>Cold Start Performance: Avg=130.0ms, Max=141ms</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3f01d12d-dd6e-4420-ae33-043e02c3eb0c" testId="cf1ff64e-8e10-7ae6-a670-98faed7e8dbe" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: &quot;2024-01-19&quot;, description: &quot;weekly expiry&quot;)" computerName="SONAKSHI" duration="00:00:00.1741713" startTime="2025-08-25T21:22:45.0621845+01:00" endTime="2025-08-25T21:22:45.0621848+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3f01d12d-dd6e-4420-ae33-043e02c3eb0c">
      <Output>
        <StdOut>Command: get-options --symbol SPY --date 2024-01-19&#xD;
Exit Code: 0&#xD;
Execution Time: 172ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"SPY","expiry":"2024-01-19","chain":[]},"meta":{"count":0,"timestamp":"2025-08-25T20:22:45.011Z"}}</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExecutionTimeMs to be less than or equal to 30L because weekly expiry options must meet SLO (&lt;30ms), but found 172L (difference of 142).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(String date, String description) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 151&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8f8af0d-5faf-430b-b7c1-1a30df9f5df0" testId="63daa1ce-c43b-f74b-dff2-ca8051321189" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;XLE&quot;)" computerName="SONAKSHI" duration="00:00:00.1521975" startTime="2025-08-25T21:22:44.7167288+01:00" endTime="2025-08-25T21:22:44.7167290+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8f8af0d-5faf-430b-b7c1-1a30df9f5df0">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 54&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36dd2625-1831-4523-945c-6f5ca4993db5" testId="6ca5a343-28d2-988e-a3d1-0ac59578c058" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcServer_Startup_MustCreateNamedPipeWithStandardName" computerName="SONAKSHI" duration="00:00:15.0069716" startTime="2025-08-25T21:24:14.0133013+01:00" endTime="2025-08-25T21:24:14.0133016+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36dd2625-1831-4523-945c-6f5ca4993db5">
      <Output>
        <StdOut>Testing IPC server pipe name conventions...&#xD;
Failed to connect to stroll.history: The operation has timed out.&#xD;
Failed to connect to stroll.history.41212: The operation has timed out.&#xD;
Failed to connect to stroll.history.server: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>Expected connectionSucceeded to be true because IPC server must be accessible via Named Pipe, but found False.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Primitives.BooleanAssertions`1.BeTrue(String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcServer_Startup_MustCreateNamedPipeWithStandardName() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 65&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="77e4804b-941c-43ab-91e6-541da118e071" testId="498b763e-7b76-0e04-e368-31cf9aced6ba" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ForceKill_MustCleanupResources" computerName="SONAKSHI" duration="00:00:00.0295670" startTime="2025-08-25T21:23:13.1856254+01:00" endTime="2025-08-25T21:23:13.1856258+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="77e4804b-941c-43ab-91e6-541da118e071">
      <Output>
        <StdOut>Process 52964 terminated and cleaned up successfully</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bee95296-0311-4d9d-8b31-a91ea82383f7" testId="9abd53b2-101b-f815-e8cf-0804376ff000" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;OIH&quot;)" computerName="SONAKSHI" duration="00:00:00.1367221" startTime="2025-08-25T21:22:45.1352656+01:00" endTime="2025-08-25T21:22:45.1352665+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bee95296-0311-4d9d-8b31-a91ea82383f7">
      <Output>
        <StdOut>Oil/Energy symbol OIH not available: Exit=-1, Output=</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be one of {0, 3} because OIH should either succeed (0) or report no data (3), not fail completely, but found -1.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 167&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d0568ee7-6b3e-4940-ae3f-7d7e820e8550" testId="d868ef31-8c21-5b32-9e1e-7ecb8735d5ce" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;USO&quot;)" computerName="SONAKSHI" duration="00:00:00.1561244" startTime="2025-08-25T21:22:44.4088386+01:00" endTime="2025-08-25T21:22:44.4088393+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0568ee7-6b3e-4940-ae3f-7d7e820e8550">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 54&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1457f964-3be7-47c2-93ca-77ca81743c50" testId="a0f2be1f-6a20-f77c-a432-095aad79f209" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.GracefulShutdown_MustCompleteWithinTimeout" computerName="SONAKSHI" duration="00:00:00.9988650" startTime="2025-08-25T21:22:56.9174939+01:00" endTime="2025-08-25T21:22:56.9174942+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1457f964-3be7-47c2-93ca-77ca81743c50">
      <Output>
        <StdOut>Graceful shutdown completed in 0ms</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="980d0e60-acf4-4a5d-98de-1cb066ade6b9" testId="7c2f39fd-95d4-786a-c566-b77ae9fa6746" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError" computerName="SONAKSHI" duration="00:00:00.1613455" startTime="2025-08-25T21:22:44.6915555+01:00" endTime="2025-08-25T21:22:44.6915556+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="980d0e60-acf4-4a5d-98de-1cb066ade6b9">
      <Output>
        <StdOut>Command: get-bars --symbol INVALID_SYMBOL_XYZ --from 2024-01-01 --to 2024-01-31&#xD;
Exit Code: 0&#xD;
Execution Time: 154ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"INVALID_SYMBOL_XYZ","granularity":"1m","from":"2024-01-01","to":"2024-01-31","bars":[]},"meta":{"count":0,"timestamp":"2025-08-25T20:22:44.662Z"}}</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 3 because data not found should return exit code 3, but found 0 (difference of -3).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 130&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b947cb41-531d-49ac-9fdd-a49f55dd9e54" testId="852d2a22-e4c5-db23-b204-eeb31211f60c" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;SPY&quot;, date: &quot;2024-01-19&quot;, description: &quot;weekly&quot;)" computerName="SONAKSHI" duration="00:00:00.1895322" startTime="2025-08-25T21:22:46.6402846+01:00" endTime="2025-08-25T21:22:46.6402853+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b947cb41-531d-49ac-9fdd-a49f55dd9e54" />
    <UnitTestResult executionId="98ee251f-751e-4528-9284-c2c9c905e652" testId="2fdfcb73-88ba-ce23-826c-6777399aa01c" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Performance_MustMeetLatencySLO" computerName="SONAKSHI" duration="00:00:00.0010000" startTime="2025-08-25T21:23:00.7640529+01:00" endTime="2025-08-25T21:23:00.7640532+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="98ee251f-751e-4528-9284-c2c9c905e652">
      <Output>
        <ErrorInfo>
          <Message>System.InvalidOperationException : Process stroll.history.ipc failed startup validation</Message>
          <StackTrace>   at Stroll.Process.ProcessManager.EnsureProcessAsync(String processId, ProcessSpec spec) in C:\code\Stroll\Stroll.Runtime\Stroll.Process\ProcessManager.cs:line 58&#xD;
   at Stroll.Process.IpcProcessManager.EnsureIpcServerAsync(String processId, String executablePath, String pipeName, String[] arguments, String workingDirectory) in C:\code\Stroll\Stroll.Runtime\Stroll.Process\IpcProcessManager.cs:line 36&#xD;
   at Stroll.History.Integrity.Tests.IpcTestFixture.EnsureStrollHistoryIpcServerAsync() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcTestFixture.cs:line 40&#xD;
   at Stroll.History.Integrity.Tests.IpcTestBase.EnsureIpcServerAsync() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcTestFixture.cs:line 167&#xD;
   at Stroll.History.Integrity.Tests.IpcTestBase.InitializeAsync() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcTestFixture.cs:line 182</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ee5418ee-5779-4c04-95f0-5f667f356574" testId="45ddda53-a0bf-e237-e92e-8d2bacc11893" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;BOIL&quot;)" computerName="SONAKSHI" duration="00:00:00.0067203" startTime="2025-08-25T21:22:45.2054648+01:00" endTime="2025-08-25T21:22:45.2054652+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ee5418ee-5779-4c04-95f0-5f667f356574">
      <Output>
        <StdOut>Oil/Energy symbol BOIL not available: Exit=-1, Output=</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be one of {0, 3} because BOIL should either succeed (0) or report no data (3), not fail completely, but found -1.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 167&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="526b9621-8ff5-4e2c-b0a3-d9f3126fbd97" testId="c498f224-7d3c-0cf5-5186-95f77e5a2cd8" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;UNG&quot;)" computerName="SONAKSHI" duration="00:00:00.0565787" startTime="2025-08-25T21:22:45.2626558+01:00" endTime="2025-08-25T21:22:45.2626563+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="526b9621-8ff5-4e2c-b0a3-d9f3126fbd97">
      <Output>
        <StdOut>Oil/Energy symbol UNG not available: Exit=-1, Output=</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be one of {0, 3} because UNG should either succeed (0) or report no data (3), not fail completely, but found -1.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 167&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a2d5d0cb-1298-49c4-a8ae-1daa7d23b3c9" testId="21515c87-1674-a668-24cd-e7cf0b8b79a6" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ColdStart_Performance_MustMeetBootstrapSLO" computerName="SONAKSHI" duration="00:00:08.1844094" startTime="2025-08-25T21:22:53.2342420+01:00" endTime="2025-08-25T21:22:53.2342424+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a2d5d0cb-1298-49c4-a8ae-1daa7d23b3c9">
      <Output>
        <StdOut>Cold start 1: 153ms&#xD;
Cold start 2: 154ms&#xD;
Cold start 3: 115ms&#xD;
Cold start 4: 138ms&#xD;
Cold start 5: 140ms&#xD;
Cold Start Performance: Avg=140.0ms, Max=154ms</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9848ae07-8612-4bc1-b9a9-a737b1828564" testId="f7a3ab53-c7e7-2087-a390-a9470fdf08f5" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO" computerName="SONAKSHI" duration="00:00:00.1619804" startTime="2025-08-25T21:22:44.3810488+01:00" endTime="2025-08-25T21:22:44.3810491+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9848ae07-8612-4bc1-b9a9-a737b1828564">
      <Output>
        <StdOut>Command: get-bars --symbol SPY --from 2024-01-01 --to 2024-01-31 --granularity 1d&#xD;
Exit Code: 0&#xD;
Execution Time: 160ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"SPY","granularity":"1d","from":"2024-01-01","to":"2024-01-31","bars":[{"t":"","o":464.783,"h":466.27,"l":463.14,"c":465.266,"v":124960111,"symbol":"SPY","g":"1d"},{"t":"","o":463.08,"h":463.829,"l":460.856,"c":461.466,"v":105229929,"symbol":"SPY","g":"1d"},{"t":"","o":460.984,"h":463.601,"l":459.752,"c":459.98,"v":85569059,"symbol":"SPY","g":"1d"},{"t":"","o":460.186,"h":463.09,"l":459.142,"c":460.61,"v":87485749,"symbol":"SPY","g":"1d"},{"t":"","o":461.111,"h":467.334,"l":460.984,"c":467.185,"v":76067517,"symbol":"SPY","g":"1d"},{"t":"","o":464.497,"h":467.509,"l":463.986,"c":466.476,"v":66977869,"symbol":"SPY","g":"1d"},{"t":"","o":466.752,"h":469.989,"l":466.466,"c":469.114,"v":68378960,"symbol":"SPY","g":"1d"},{"t":"","o":470.128,"h":470.651,"l":464.881,"c":468.908,"v":79177759,"symbol":"SPY","g":"1d"},{"t":"","o":470.373,"h":471.123,"l":467.805,"c":469.233,"v":58947386,"symbol":"SPY","g":"1d"},{"t":"","o":467.834,"h":469.164,"l":465.669,"c":467.509,"v":86364183,"symbol":"SPY","g":"1d"},{"t":"","o":464.448,"h":465.403,"l":462.53,"c":464.911,"v":69936526,"symbol":"SPY","g":"1d"},{"t":"","o":466.604,"h":469.607,"l":465.039,"c":469.045,"v":93314144,"symbol":"SPY","g":"1d"},{"t":"","o":470.188,"h":475.178,"l":469.091,"c":474.892,"v":112593592,"symbol":"SPY","g":"1d"},{"t":"","o":476.448,"h":477.639,"l":475.237,"c":475.897,"v":77048703,"symbol":"SPY","g":"1d"},{"t":"","o":476.448,"h":477.525,"l":475.345,"c":477.285,"v":50738003,"symbol":"SPY","g":"1d"},{"t":"","o":480.188,"h":481.133,"l":477.307,"c":477.806,"v":83062772,"symbol":"SPY","g":"1d"},{"t":"","o":479.958,"h":480.677,"l":477.806,"c":480.404,"v":73676069,"symbol":"SPY","g":"1d"},{"t":"","o":479.973,"h":481.478,"l":478.939,"c":479.794,"v":77858026,"symbol":"SPY","g":"1d"},{"t":"","o":480.109,"h":483.737,"l":479.558,"c":483.595,"v":62296035,"symbol":"SPY","g":"1d"},{"t":"","o":482.896,"h":483.94,"l":482.453,"c":483.221,"v":59548747,"symbol":"SPY","g":"1d"},{"t":"","o":480.987,"h":481.439,"l":475.316,"c":475.335,"v":128011046,"symbol":"SPY","g":"1d"}]},"meta":{"count":21,"timestamp":"2025-08-25T20:22:44.349Z"}}</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExecutionTimeMs to be less than or equal to 40L because monthly bars must complete in &lt;40ms (P99 SLO), but found 160L (difference of 120).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 111&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="19449f60-837d-4b7a-9b89-129a507fa260" testId="eee663c9-7edd-c938-7bf2-4a34517b3c51" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;QQQ&quot;)" computerName="SONAKSHI" duration="00:00:00.1547009" startTime="2025-08-25T21:22:44.5640066+01:00" endTime="2025-08-25T21:22:44.5640068+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="19449f60-837d-4b7a-9b89-129a507fa260">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 54&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c5325fd4-f4e4-42bc-b5b5-922ab3e2dd12" testId="968fccda-0f7b-3d4a-0c3e-3ba8f27712a1" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Version_MustReturnValidVersionSchema" computerName="SONAKSHI" duration="00:00:00.1744214" startTime="2025-08-25T21:22:43.8086859+01:00" endTime="2025-08-25T21:22:43.8086862+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c5325fd4-f4e4-42bc-b5b5-922ab3e2dd12">
      <Output>
        <StdOut>Command: version&#xD;
Exit Code: 0&#xD;
Execution Time: 130ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"service":"stroll.history","version":"1.0.0"}}</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExecutionTimeMs to be less than or equal to 5L because version command must complete in &lt;5ms (SLO), but found 130L (difference of 125).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Version_MustReturnValidVersionSchema() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 71&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="250be6f5-45a8-4c30-89c4-24b373d4f5df" testId="130227d6-949f-cd4f-6bff-8d4961f0ee9a" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: &quot;2024-01-31&quot;, description: &quot;monthly expiry&quot;)" computerName="SONAKSHI" duration="00:00:00.1949239" startTime="2025-08-25T21:22:44.8872182+01:00" endTime="2025-08-25T21:22:44.8872189+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="250be6f5-45a8-4c30-89c4-24b373d4f5df">
      <Output>
        <StdOut>Command: get-options --symbol SPY --date 2024-01-31&#xD;
Exit Code: 0&#xD;
Execution Time: 192ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"SPY","expiry":"2024-01-31","chain":[]},"meta":{"count":0,"timestamp":"2025-08-25T20:22:44.816Z"}}</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExecutionTimeMs to be less than or equal to 50L because monthly expiry options must meet SLO (&lt;50ms), but found 192L (difference of 142).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(String date, String description) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 151&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="33709646-5a0e-4f61-9493-232d65cdac4a" testId="7d24f10f-08c2-6db5-865f-0317ad547814" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;XLE&quot;)" computerName="SONAKSHI" duration="00:00:00.0622517" startTime="2025-08-25T21:22:45.1981649+01:00" endTime="2025-08-25T21:22:45.1981651+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="33709646-5a0e-4f61-9493-232d65cdac4a">
      <Output>
        <StdOut>Oil/Energy symbol XLE not available: Exit=-1, Output=</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be one of {0, 3} because XLE should either succeed (0) or report no data (3), not fail completely, but found -1.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 167&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7e688bed-56ba-4d99-a6f5-66fe593b6f9e" testId="63e5e473-b665-c476-0652-077debdb9447" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat" computerName="SONAKSHI" duration="00:00:04.9938548" startTime="2025-08-25T21:23:59.0046580+01:00" endTime="2025-08-25T21:23:59.0046582+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7e688bed-56ba-4d99-a6f5-66fe593b6f9e">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.IO.IOException : Pipe is broken.</Message>
          <StackTrace>   at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
   at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
   at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 88&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="94b44c08-d0d0-426b-a474-7d69d4689224" testId="b13f8a79-42f6-99db-717d-12f7ffb70858" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-01&quot;, to: &quot;2024-01-31&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_month&quot;)" computerName="SONAKSHI" duration="00:00:00.0273662" startTime="2025-08-25T21:22:45.1963624+01:00" endTime="2025-08-25T21:22:45.1963628+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="94b44c08-d0d0-426b-a474-7d69d4689224">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because get-bars single_month must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 90&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5f32b023-e307-4814-8658-04ee0462ec20" testId="616857ce-c3bb-273a-3c6c-953b19c49f8b" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;SPY&quot;, date: &quot;2024-01-31&quot;, description: &quot;monthly&quot;)" computerName="SONAKSHI" duration="00:00:00.1551583" startTime="2025-08-25T21:22:46.4504589+01:00" endTime="2025-08-25T21:22:46.4504594+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5f32b023-e307-4814-8658-04ee0462ec20" />
    <UnitTestResult executionId="9630c158-c493-4afa-b204-35340e6556fd" testId="9013f874-8a4c-4c73-e79f-a509e61da1b6" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;GUSH&quot;)" computerName="SONAKSHI" duration="00:00:00.2093789" startTime="2025-08-25T21:22:45.4816753+01:00" endTime="2025-08-25T21:22:45.4816758+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9630c158-c493-4afa-b204-35340e6556fd" />
  </Results>
  <TestDefinitions>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d1046a89-ce94-3c20-cf55-15cedf399078">
      <Execution id="01d5e36e-5228-401a-b123-46c513da908b" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ConcurrentConnections_MustHandleMultipleClients" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-01&quot;, to: &quot;2024-01-07&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_week&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="ab2b2a05-ed37-b373-0697-8aa7b21d8d5d">
      <Execution id="f6182e6c-b5e9-410f-ae7f-725d9e71b34c" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetBarsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="f7a3ab53-c7e7-2087-a390-a9470fdf08f5">
      <Execution id="9848ae07-8612-4bc1-b9a9-a737b1828564" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="345169e6-3dc3-afa2-a0a8-9fb2f1d400d2">
      <Execution id="8dedaf4a-efb1-491c-ab7e-b94e086e7a6a" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ProcessSpawn_Overhead_MustMeetPerformanceSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.GracefulShutdown_MustCompleteWithinTimeout" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a0f2be1f-6a20-f77c-a432-095aad79f209">
      <Execution id="1457f964-3be7-47c2-93ca-77ca81743c50" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="GracefulShutdown_MustCompleteWithinTimeout" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="7c2f39fd-95d4-786a-c566-b77ae9fa6746">
      <Execution id="980d0e60-acf4-4a5d-98de-1cb066ade6b9" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetBars_InvalidSymbol_MustReturnStandardError" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="f12d43d6-09ca-94cc-3081-2e6b5b79a2f5">
      <Execution id="7bfdb47a-b594-4ee4-a8c9-2572911fe7e4" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcConnection_Persistence_MustReuseConnectionsEfficiently" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="b0cb56fa-2d51-d0d1-ff37-a047257de28f">
      <Execution id="130b5488-3a1a-4790-9d73-c2da60bbb88e" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="InitializationOrder_MustCompleteBeforeAcceptingRequests" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-15&quot;, to: &quot;2024-01-15&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_day&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d9d5e9cb-812b-39a5-915f-74231facbaf3">
      <Execution id="02f28f60-8ba0-4fe5-9bb9-378285eb02fb" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetBarsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;XLE&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="7d24f10f-08c2-6db5-865f-0317ad547814">
      <Execution id="33709646-5a0e-4f61-9493-232d65cdac4a" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;ERX&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d5b7c5d1-908c-90c4-0c53-379ba6ea3959">
      <Execution id="f2a37aa4-4154-43d6-aaec-9d53a0fb9cf3" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;UNG&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="c498f224-7d3c-0cf5-5186-95f77e5a2cd8">
      <Execution id="526b9621-8ff5-4e2c-b0a3-d9f3126fbd97" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;OILY&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="547563c8-101e-3ed7-b3d3-ffeb50de455a">
      <Execution id="efaf8223-3ce6-4cda-a121-42ddeb86554c" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="9720b5d8-629d-49df-67fd-acba0735f3a3">
      <Execution id="2c125041-b8bb-400d-bf15-75f9fe3b7e8a" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;DRIP&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="73faff17-d744-8883-57fa-d6a3005947d4">
      <Execution id="4ae29800-ad8d-435c-90b1-9d80aaf6e065" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ForceKill_MustCleanupResources" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="498b763e-7b76-0e04-e368-31cf9aced6ba">
      <Execution id="77e4804b-941c-43ab-91e6-541da118e071" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ForceKill_MustCleanupResources" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="bd89ac76-1178-a9a8-b539-d7abc58c5d5d">
      <Execution id="c3b69e92-eb04-4f9a-8e24-b0a2dd9e20ce" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;SPY&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a65e01be-e329-9ced-a231-8f240e9dbff3">
      <Execution id="a922824c-7e33-45f8-acf9-008040c2f063" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;QQQ&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="eee663c9-7edd-c938-7bf2-4a34517b3c51">
      <Execution id="19449f60-837d-4b7a-9b89-129a507fa260" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataQuality_OHLCV_MustSatisfyFinancialInvariants" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;XLE&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="dfe6ee38-021d-7fbf-62be-74dc8f7bd624">
      <Execution id="2e50ac70-02e6-4dde-8fc2-c090ad6ea4d3" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Performance_MustMeetLatencySLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="2fdfcb73-88ba-ce23-826c-6777399aa01c">
      <Execution id="98ee251f-751e-4528-9284-c2c9c905e652" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcConnection_Performance_MustMeetLatencySLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;QQQ&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="2a98c4fa-8bce-0aac-f1e5-20629f4fcd20">
      <Execution id="11c5fb67-0828-4347-ae2d-01e2e4b11aad" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="c60bb786-dacb-4f91-d8c0-17001cfed7a7">
      <Execution id="b6902195-cdca-45df-bcea-d758683b463c" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_MustHandleInvalidArguments_WithStandardErrorFormat" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.MultiSymbol_ConsistentResponse_MustHaveSameSchema" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="34c2d878-9f9a-c3fb-f608-685427dd1ff8">
      <Execution id="6a832b8f-48f6-43f2-828f-893bb5a8dac2" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="MultiSymbol_ConsistentResponse_MustHaveSameSchema" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;USO&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d868ef31-8c21-5b32-9e1e-7ecb8735d5ce">
      <Execution id="d0568ee7-6b3e-4940-ae3f-7d7e820e8550" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataQuality_OHLCV_MustSatisfyFinancialInvariants" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, date: &quot;2024-01-19&quot;, scenario: &quot;weekly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="8c252c2d-052d-8947-948e-0317943dbcb9">
      <Execution id="ba118b34-6eb1-48b1-b678-41da17b9633d" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetOptionsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.LoadTest_ConcurrentRequests_MustMaintainThroughputSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="bf31a76f-3c4d-96bf-54e8-1fab0c1cb5d5">
      <Execution id="d293b389-b9a7-4498-b562-1dc9080d24e7" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="LoadTest_ConcurrentRequests_MustMaintainThroughputSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="46f4fb9a-9ec3-3575-6a3e-f54dfe0e0e6b">
      <Execution id="0a13ba11-51cd-43a2-b5d9-772d26dc0da5" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ErrorRecovery_TransientFailures_MustRecoverGracefully" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;SPY&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="02b1d2f1-3459-ba65-f8fa-b0b332fd1ac5">
      <Execution id="69308c66-0e78-4420-99e4-2d2b3a8d15c5" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataQuality_OHLCV_MustSatisfyFinancialInvariants" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;XLE&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="63daa1ce-c43b-f74b-dff2-ca8051321189">
      <Execution id="a8f8af0d-5faf-430b-b7c1-1a30df9f5df0" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataQuality_OHLCV_MustSatisfyFinancialInvariants" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;ERY&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a1abdd3e-f3c6-1c14-6064-4f2dd0d24d96">
      <Execution id="63190695-a38b-4d63-8e8c-554ffb38eb45" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;SPY&quot;, date: &quot;2024-01-31&quot;, description: &quot;monthly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="616857ce-c3bb-273a-3c6c-953b19c49f8b">
      <Execution id="5f32b023-e307-4814-8658-04ee0462ec20" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OptionsData_Availability_MustProvideValidChains" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;GUSH&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="9013f874-8a4c-4c73-e79f-a509e61da1b6">
      <Execution id="9630c158-c493-4afa-b204-35340e6556fd" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;USO&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="698150cf-a3bf-0a44-9fc6-9e4a7cd1afaf">
      <Execution id="f1e4452e-7486-441a-a4e3-766f6422db86" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, date: &quot;2024-01-31&quot;, scenario: &quot;monthly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="669a21aa-c949-333b-2581-d8d519a421f7">
      <Execution id="d50b9814-c98c-4250-8e5d-f2097280acfa" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetOptionsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="24742c7d-d023-969a-bdc2-2d3c3debc16b">
      <Execution id="9898a9d2-e7df-4449-9864-8a78d29bc6fe" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="LongTermData_Availability_MustSpanMultipleYears" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;OIH&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="9abd53b2-101b-f815-e8cf-0804376ff000">
      <Execution id="bee95296-0311-4d9d-8b31-a91ea82383f7" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;QQQ&quot;, date: &quot;2024-01-19&quot;, description: &quot;weekly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="6d82db8f-5e56-2998-5fc5-a4fc1c24ccd8">
      <Execution id="457d8a96-6544-447a-be55-97e7fdf2f41e" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OptionsData_Availability_MustProvideValidChains" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;USO&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="77a4f4e8-bb0c-c2d6-caf9-3aaae7127b49">
      <Execution id="68e01bb7-9194-42d3-bb00-cbe5cc3f8e3f" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a97e8704-df43-aa55-d55e-cc7f9f54d62b">
      <Execution id="69257494-33a1-4bc7-98f4-4db8fefc04b9" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetBars_SingleDay_MustMeetPerformanceSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Version_MustReturnValidVersionSchema" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="968fccda-0f7b-3d4a-0c3e-3ba8f27712a1">
      <Execution id="c5325fd4-f4e4-42bc-b5b5-922ab3e2dd12" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_Version_MustReturnValidVersionSchema" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ColdStart_Performance_MustMeetBootstrapSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="21515c87-1674-a668-24cd-e7cf0b8b79a6">
      <Execution id="a2d5d0cb-1298-49c4-a8ae-1daa7d23b3c9" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ColdStart_Performance_MustMeetBootstrapSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;XOP&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d50dac0e-a7de-09cc-da1c-bc348c29be5f">
      <Execution id="f448daea-d4d5-42c2-85af-70ba677facfa" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: &quot;2024-01-31&quot;, description: &quot;monthly expiry&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="130227d6-949f-cd4f-6bff-8d4961f0ee9a">
      <Execution id="250be6f5-45a8-4c30-89c4-24b373d4f5df" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetOptions_MustMeetPerformanceAndQualitySLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="0a60c8d7-ce2e-951c-8c65-0d1888537231">
      <Execution id="beb0146d-eb07-4df2-ad6f-f39d5a001c60" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_DiscoverCommand_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="63e5e473-b665-c476-0652-077debdb9447">
      <Execution id="7e688bed-56ba-4d99-a6f5-66fe593b6f9e" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Discover_MustReturnValidContractSchema" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="34d94d2d-122b-5143-8b16-e37fc2f5b7f3">
      <Execution id="3f17b9a0-1317-472e-8e1d-2da114d25a20" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_Discover_MustReturnValidContractSchema" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: &quot;2024-01-19&quot;, description: &quot;weekly expiry&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="cf1ff64e-8e10-7ae6-a670-98faed7e8dbe">
      <Execution id="3f01d12d-dd6e-4420-ae33-043e02c3eb0c" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetOptions_MustMeetPerformanceAndQualitySLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-01&quot;, to: &quot;2024-01-31&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_month&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="b13f8a79-42f6-99db-717d-12f7ffb70858">
      <Execution id="94b44c08-d0d0-426b-a474-7d69d4689224" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetBarsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="f0453f9e-8f1b-6bc5-2f7d-f889f91dca59">
      <Execution id="b3703ea1-a14e-45db-a815-628eb3e0ca48" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_ProviderStatus_MustReturnHealthInformation" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.ColdStart_Performance_MustMeetBootstrapSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a3cc2a23-de32-b194-4da8-ac2edc918fbd">
      <Execution id="c38e68ca-a4d2-4da6-bf44-26e2c0158911" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="ColdStart_Performance_MustMeetBootstrapSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.MemoryUsage_UnderLoad_MustNotExceedLimits" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="070eb660-3594-4f33-e767-639f4867d099">
      <Execution id="c40e845c-5202-4dce-96d5-2ab7943127d5" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="MemoryUsage_UnderLoad_MustNotExceedLimits" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="b82280b4-dbf6-d42b-a3fb-284005534d07">
      <Execution id="2f10102f-771c-4135-87a7-4170ec3bc6db" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;BOIL&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="45ddda53-a0bf-e237-e92e-8d2bacc11893">
      <Execution id="ee5418ee-5779-4c04-95f0-5f667f356574" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;SPY&quot;, date: &quot;2024-01-19&quot;, description: &quot;weekly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="852d2a22-e4c5-db23-b204-eeb31211f60c">
      <Execution id="b947cb41-531d-49ac-9fdd-a49f55dd9e54" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OptionsData_Availability_MustProvideValidChains" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcServer_Startup_MustCreateNamedPipeWithStandardName" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="6ca5a343-28d2-988e-a3d1-0ac59578c058">
      <Execution id="36dd2625-1831-4523-945c-6f5ca4993db5" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcServer_Startup_MustCreateNamedPipeWithStandardName" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="67affca7-d2a3-f2c9-5a36-dcf803e169a1">
      <Execution id="b6183abd-dd06-4553-be2e-3d9934033c81" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ResourceLimits_UnderNormalLoad_MustNotExceedLimits" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="1660c8b5-3c0d-b313-cd84-8dbfedaee52e">
      <Execution id="0bd294cc-d769-42d2-8f8a-c5c912994e00" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="b0cb56fa-2d51-d0d1-ff37-a047257de28f" executionId="130b5488-3a1a-4790-9d73-c2da60bbb88e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="070eb660-3594-4f33-e767-639f4867d099" executionId="c40e845c-5202-4dce-96d5-2ab7943127d5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="698150cf-a3bf-0a44-9fc6-9e4a7cd1afaf" executionId="f1e4452e-7486-441a-a4e3-766f6422db86" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02b1d2f1-3459-ba65-f8fa-b0b332fd1ac5" executionId="69308c66-0e78-4420-99e4-2d2b3a8d15c5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="669a21aa-c949-333b-2581-d8d519a421f7" executionId="d50b9814-c98c-4250-8e5d-f2097280acfa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f12d43d6-09ca-94cc-3081-2e6b5b79a2f5" executionId="7bfdb47a-b594-4ee4-a8c9-2572911fe7e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1abdd3e-f3c6-1c14-6064-4f2dd0d24d96" executionId="63190695-a38b-4d63-8e8c-554ffb38eb45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b82280b4-dbf6-d42b-a3fb-284005534d07" executionId="2f10102f-771c-4135-87a7-4170ec3bc6db" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9720b5d8-629d-49df-67fd-acba0735f3a3" executionId="2c125041-b8bb-400d-bf15-75f9fe3b7e8a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c60bb786-dacb-4f91-d8c0-17001cfed7a7" executionId="b6902195-cdca-45df-bcea-d758683b463c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5b7c5d1-908c-90c4-0c53-379ba6ea3959" executionId="f2a37aa4-4154-43d6-aaec-9d53a0fb9cf3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a98c4fa-8bce-0aac-f1e5-20629f4fcd20" executionId="11c5fb67-0828-4347-ae2d-01e2e4b11aad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c252c2d-052d-8947-948e-0317943dbcb9" executionId="ba118b34-6eb1-48b1-b678-41da17b9633d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="345169e6-3dc3-afa2-a0a8-9fb2f1d400d2" executionId="8dedaf4a-efb1-491c-ab7e-b94e086e7a6a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a60c8d7-ce2e-951c-8c65-0d1888537231" executionId="beb0146d-eb07-4df2-ad6f-f39d5a001c60" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a97e8704-df43-aa55-d55e-cc7f9f54d62b" executionId="69257494-33a1-4bc7-98f4-4db8fefc04b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d50dac0e-a7de-09cc-da1c-bc348c29be5f" executionId="f448daea-d4d5-42c2-85af-70ba677facfa" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd89ac76-1178-a9a8-b539-d7abc58c5d5d" executionId="c3b69e92-eb04-4f9a-8e24-b0a2dd9e20ce" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dfe6ee38-021d-7fbf-62be-74dc8f7bd624" executionId="2e50ac70-02e6-4dde-8fc2-c090ad6ea4d3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d9d5e9cb-812b-39a5-915f-74231facbaf3" executionId="02f28f60-8ba0-4fe5-9bb9-378285eb02fb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34c2d878-9f9a-c3fb-f608-685427dd1ff8" executionId="6a832b8f-48f6-43f2-828f-893bb5a8dac2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab2b2a05-ed37-b373-0697-8aa7b21d8d5d" executionId="f6182e6c-b5e9-410f-ae7f-725d9e71b34c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34d94d2d-122b-5143-8b16-e37fc2f5b7f3" executionId="3f17b9a0-1317-472e-8e1d-2da114d25a20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1046a89-ce94-3c20-cf55-15cedf399078" executionId="01d5e36e-5228-401a-b123-46c513da908b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a65e01be-e329-9ced-a231-8f240e9dbff3" executionId="a922824c-7e33-45f8-acf9-008040c2f063" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6d82db8f-5e56-2998-5fc5-a4fc1c24ccd8" executionId="457d8a96-6544-447a-be55-97e7fdf2f41e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73faff17-d744-8883-57fa-d6a3005947d4" executionId="4ae29800-ad8d-435c-90b1-9d80aaf6e065" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="547563c8-101e-3ed7-b3d3-ffeb50de455a" executionId="efaf8223-3ce6-4cda-a121-42ddeb86554c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24742c7d-d023-969a-bdc2-2d3c3debc16b" executionId="9898a9d2-e7df-4449-9864-8a78d29bc6fe" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf31a76f-3c4d-96bf-54e8-1fab0c1cb5d5" executionId="d293b389-b9a7-4498-b562-1dc9080d24e7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46f4fb9a-9ec3-3575-6a3e-f54dfe0e0e6b" executionId="0a13ba11-51cd-43a2-b5d9-772d26dc0da5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0453f9e-8f1b-6bc5-2f7d-f889f91dca59" executionId="b3703ea1-a14e-45db-a815-628eb3e0ca48" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67affca7-d2a3-f2c9-5a36-dcf803e169a1" executionId="b6183abd-dd06-4553-be2e-3d9934033c81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1660c8b5-3c0d-b313-cd84-8dbfedaee52e" executionId="0bd294cc-d769-42d2-8f8a-c5c912994e00" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="77a4f4e8-bb0c-c2d6-caf9-3aaae7127b49" executionId="68e01bb7-9194-42d3-bb00-cbe5cc3f8e3f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3cc2a23-de32-b194-4da8-ac2edc918fbd" executionId="c38e68ca-a4d2-4da6-bf44-26e2c0158911" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf1ff64e-8e10-7ae6-a670-98faed7e8dbe" executionId="3f01d12d-dd6e-4420-ae33-043e02c3eb0c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63daa1ce-c43b-f74b-dff2-ca8051321189" executionId="a8f8af0d-5faf-430b-b7c1-1a30df9f5df0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ca5a343-28d2-988e-a3d1-0ac59578c058" executionId="36dd2625-1831-4523-945c-6f5ca4993db5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="498b763e-7b76-0e04-e368-31cf9aced6ba" executionId="77e4804b-941c-43ab-91e6-541da118e071" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9abd53b2-101b-f815-e8cf-0804376ff000" executionId="bee95296-0311-4d9d-8b31-a91ea82383f7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d868ef31-8c21-5b32-9e1e-7ecb8735d5ce" executionId="d0568ee7-6b3e-4940-ae3f-7d7e820e8550" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0f2be1f-6a20-f77c-a432-095aad79f209" executionId="1457f964-3be7-47c2-93ca-77ca81743c50" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c2f39fd-95d4-786a-c566-b77ae9fa6746" executionId="980d0e60-acf4-4a5d-98de-1cb066ade6b9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="852d2a22-e4c5-db23-b204-eeb31211f60c" executionId="b947cb41-531d-49ac-9fdd-a49f55dd9e54" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fdfcb73-88ba-ce23-826c-6777399aa01c" executionId="98ee251f-751e-4528-9284-c2c9c905e652" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45ddda53-a0bf-e237-e92e-8d2bacc11893" executionId="ee5418ee-5779-4c04-95f0-5f667f356574" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c498f224-7d3c-0cf5-5186-95f77e5a2cd8" executionId="526b9621-8ff5-4e2c-b0a3-d9f3126fbd97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21515c87-1674-a668-24cd-e7cf0b8b79a6" executionId="a2d5d0cb-1298-49c4-a8ae-1daa7d23b3c9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7a3ab53-c7e7-2087-a390-a9470fdf08f5" executionId="9848ae07-8612-4bc1-b9a9-a737b1828564" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eee663c9-7edd-c938-7bf2-4a34517b3c51" executionId="19449f60-837d-4b7a-9b89-129a507fa260" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="968fccda-0f7b-3d4a-0c3e-3ba8f27712a1" executionId="c5325fd4-f4e4-42bc-b5b5-922ab3e2dd12" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="130227d6-949f-cd4f-6bff-8d4961f0ee9a" executionId="250be6f5-45a8-4c30-89c4-24b373d4f5df" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d24f10f-08c2-6db5-865f-0317ad547814" executionId="33709646-5a0e-4f61-9493-232d65cdac4a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63e5e473-b665-c476-0652-077debdb9447" executionId="7e688bed-56ba-4d99-a6f5-66fe593b6f9e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b13f8a79-42f6-99db-717d-12f7ffb70858" executionId="94b44c08-d0d0-426b-a474-7d69d4689224" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="616857ce-c3bb-273a-3c6c-953b19c49f8b" executionId="5f32b023-e307-4814-8658-04ee0462ec20" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9013f874-8a4c-4c73-e79f-a509e61da1b6" executionId="9630c158-c493-4afa-b204-35340e6556fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="58" executed="58" passed="16" failed="42" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.8.2+699d445a1a (64-bit .NET 9.0.8)&#xD;
[xUnit.net 00:00:00.06]   Discovering: Stroll.History.Integrity.Tests&#xD;
[xUnit.net 00:00:00.09]   Discovered:  Stroll.History.Integrity.Tests&#xD;
[xUnit.net 00:00:00.09]   Starting:    Stroll.History.Integrity.Tests&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      IpcTestFixture initializing...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      Ensuring Stroll.History IPC server is running...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        ProcessId: stroll.history.ipc&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Executable: dotnet&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Pipe Name: stroll.history.server&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Arguments: run --project Stroll.Historical.csproj -- ipc-server&#xD;
[xUnit.net 00:00:00.77]       System.ComponentModel.Win32Exception : An error occurred trying to start process 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\..\..\..\..\Stroll.Historical\bin\Debug\net9.0\Stroll.Historical.exe' with working directory 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0'. Access is denied.&#xD;
[xUnit.net 00:00:00.77]       Stack Trace:&#xD;
[xUnit.net 00:00:00.77]            at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)&#xD;
[xUnit.net 00:00:00.77]            at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)&#xD;
[xUnit.net 00:00:00.77]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(337,0): at Stroll.History.Integrity.Tests.ContractValidationTests.ExecuteCliCommand(String arguments)&#xD;
[xUnit.net 00:00:00.77]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(89,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO()&#xD;
[xUnit.net 00:00:00.77]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:00.96]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:00.96]       Stack Trace:&#xD;
[xUnit.net 00:00:00.96]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:00.96]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:00.96]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(303,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;LongTermData_Availability_MustSpanMultipleYears&gt;b__10_0(JsonElement b)&#xD;
[xUnit.net 00:00:00.96]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:00.96]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:00.96]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.96]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:00.96]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.96]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(303,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears()&#xD;
[xUnit.net 00:00:00.96]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.11]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.11]       Stack Trace:&#xD;
[xUnit.net 00:00:01.11]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.11]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.11]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(137,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b)&#xD;
[xUnit.net 00:00:01.11]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:01.11]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:01.11]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.11]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:01.11]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.11]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(137,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol)&#xD;
[xUnit.net 00:00:01.11]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.11]       Expected result.ExecutionTimeMs to be less than or equal to 5L because version command must complete in &lt;5ms (SLO), but found 130L (difference of 125).&#xD;
[xUnit.net 00:00:01.11]       Stack Trace:&#xD;
[xUnit.net 00:00:01.11]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.11]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.11]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.11]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.11]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.11]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.11]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.11]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.11]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(71,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Version_MustReturnValidVersionSchema()&#xD;
[xUnit.net 00:00:01.11]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.11]       Output:&#xD;
[xUnit.net 00:00:01.11]         Command: version&#xD;
[xUnit.net 00:00:01.11]         Exit Code: 0&#xD;
[xUnit.net 00:00:01.11]         Execution Time: 130ms&#xD;
[xUnit.net 00:00:01.11]         Output: {"schema":"stroll.history.v1","ok":true,"data":{"service":"stroll.history","version":"1.0.0"}}&#xD;
[xUnit.net 00:00:01.11]         &#xD;
[xUnit.net 00:00:01.26]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.26]       Stack Trace:&#xD;
[xUnit.net 00:00:01.26]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.26]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.26]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(137,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b)&#xD;
[xUnit.net 00:00:01.26]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:01.26]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:01.26]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.26]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:01.26]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.26]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(137,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol)&#xD;
[xUnit.net 00:00:01.26]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.41]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.41]       Stack Trace:&#xD;
[xUnit.net 00:00:01.41]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.41]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.41]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(137,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b)&#xD;
[xUnit.net 00:00:01.41]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:01.41]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:01.41]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.41]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:01.41]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.41]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(137,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol)&#xD;
[xUnit.net 00:00:01.41]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.52]       Expected result.ExecutionTimeMs to be less than or equal to 10L because provider-status must complete in &lt;10ms, but found 406L (difference of 396).&#xD;
[xUnit.net 00:00:01.52]       Stack Trace:&#xD;
[xUnit.net 00:00:01.52]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.52]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.52]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.52]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.52]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.52]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.52]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.52]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.52]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(172,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation()&#xD;
[xUnit.net 00:00:01.52]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.52]       Output:&#xD;
[xUnit.net 00:00:01.52]         Command: provider-status&#xD;
[xUnit.net 00:00:01.52]         Exit Code: 0&#xD;
[xUnit.net 00:00:01.52]         Execution Time: 406ms&#xD;
[xUnit.net 00:00:01.52]         Output: info: Stroll.Historical.DataAcquisitionEngine[0]&#xD;
[xUnit.net 00:00:01.52]               Added Local Historical Data provider&#xD;
[xUnit.net 00:00:01.52]         info: Stroll.Historical.DataAcquisitionEngine[0]&#xD;
[xUnit.net 00:00:01.52]               Added Yahoo Finance provider&#xD;
[xUnit.net 00:00:01.52]         ?? Data Provider Status:&#xD;
[xUnit.net 00:00:01.52]         &#xD;
[xUnit.net 00:00:01.52]         ? ?? Local Historical Data (Priority: 0)&#xD;
[xUnit.net 00:00:01.52]            Available: True&#xD;
[xUnit.net 00:00:01.52]            Healthy: False&#xD;
[xUnit.net 00:00:01.52]            Response Time: 2ms&#xD;
[xUnit.net 00:00:01.52]            Rate Limit: 2147483647/2147483647 per minute&#xD;
[xUnit.net 00:00:01.52]         &#xD;
[xUnit.net 00:00:01.52]         ? ?? Yahoo Finance (Priority: 1)&#xD;
[xUnit.net 00:00:01.52]            Available: True&#xD;
[xUnit.net 00:00:01.52]            Healthy: False&#xD;
[xUnit.net 00:00:01.52]            Response Time: 217ms&#xD;
[xUnit.net 00:00:01.52]            Rate Limit: 30/30 per minute&#xD;
[xUnit.net 00:00:01.52]         &#xD;
[xUnit.net 00:00:01.52]         &#xD;
[xUnit.net 00:00:01.56]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.56]       Stack Trace:&#xD;
[xUnit.net 00:00:01.56]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.56]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.56]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(137,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b)&#xD;
[xUnit.net 00:00:01.56]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:01.56]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:01.56]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.56]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:01.56]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.56]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(137,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol)&#xD;
[xUnit.net 00:00:01.56]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.68]       Expected result.ExecutionTimeMs to be less than or equal to 40L because monthly bars must complete in &lt;40ms (P99 SLO), but found 160L (difference of 120).&#xD;
[xUnit.net 00:00:01.68]       Stack Trace:&#xD;
[xUnit.net 00:00:01.68]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.68]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.68]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.69]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.69]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.69]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.69]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.69]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.69]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(111,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO()&#xD;
[xUnit.net 00:00:01.69]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.69]       Output:&#xD;
[xUnit.net 00:00:01.69]         Command: get-bars --symbol SPY --from 2024-01-01 --to 2024-01-31 --granularity 1d&#xD;
[xUnit.net 00:00:01.69]         Exit Code: 0&#xD;
[xUnit.net 00:00:01.69]         Execution Time: 160ms&#xD;
[xUnit.net 00:00:01.69]         Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"SPY","granularity":"1d","from":"2024-01-01","to":"2024-01-31","bars":[{"t":"","o":464.783,"h":466.27,"l":463.14,"c":465.266,"v":124960111,"symbol":"SPY","g":"1d"},{"t":"","o":463.08,"h":463.829,"l":460.856,"c":461.466,"v":105229929,"symbol":"SPY","g":"1d"},{"t":"","o":460.984,"h":463.601,"l":459.752,"c":459.98,"v":85569059,"symbol":"SPY","g":"1d"},{"t":"","o":460.186,"h":463.09,"l":459.142,"c":460.61,"v":87485749,"symbol":"SPY","g":"1d"},{"t":"","o":461.111,"h":467.334,"l":460.984,"c":467.185,"v":76067517,"symbol":"SPY","g":"1d"},{"t":"","o":464.497,"h":467.509,"l":463.986,"c":466.476,"v":66977869,"symbol":"SPY","g":"1d"},{"t":"","o":466.752,"h":469.989,"l":466.466,"c":469.114,"v":68378960,"symbol":"SPY","g":"1d"},{"t":"","o":470.128,"h":470.651,"l":464.881,"c":468.908,"v":79177759,"symbol":"SPY","g":"1d"},{"t":"","o":470.373,"h":471.123,"l":467.805,"c":469.233,"v":58947386,"symbol":"SPY","g":"1d"},{"t":"","o":467.834,"h":469.164,"l":465.669,"c":467.509,"v":86364183,"symbol":"SPY","g":"1d"},{"t":"","o":464.448,"h":465.403,"l":462.53,"c":464.911,"v":69936526,"symbol":"SPY","g":"1d"},{"t":"","o":466.604,"h":469.607,"l":465.039,"c":469.045,"v":93314144,"symbol":"SPY","g":"1d"},{"t":"","o":470.188,"h":475.178,"l":469.091,"c":474.892,"v":112593592,"symbol":"SPY","g":"1d"},{"t":"","o":476.448,"h":477.639,"l":475.237,"c":475.897,"v":77048703,"symbol":"SPY","g":"1d"},{"t":"","o":476.448,"h":477.525,"l":475.345,"c":477.285,"v":50738003,"symbol":"SPY","g":"1d"},{"t":"","o":480.188,"h":481.133,"l":477.307,"c":477.806,"v":83062772,"symbol":"SPY","g":"1d"},{"t":"","o":479.958,"h":480.677,"l":477.806,"c":480.404,"v":73676069,"symbol":"SPY","g":"1d"},{"t":"","o":479.973,"h":481.478,"l":478.939,"c":479.794,"v":77858026,"symbol":"SPY","g":"1d"},{"t":"","o":480.109,"h":483.737,"l":479.558,"c":483.595,"v":62296035,"symbol":"SPY","g":"1d"},{"t":"","o":482.896,"h":483.94,"l":482.453,"c":483.221,"v":59548747,"symbol":"SPY","g":"1d"},{"t":"","o":480.987,"h":481.439,"l":475.316,"c":475.335,"v":128011046,"symbol":"SPY","g":"1d"}]},"meta":{"count":21,"timestamp":"2025-08-25T20:22:44.349Z"}}&#xD;
[xUnit.net 00:00:01.69]         &#xD;
[xUnit.net 00:00:01.71]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.71]       Stack Trace:&#xD;
[xUnit.net 00:00:01.71]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.71]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.71]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(54,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol)&#xD;
[xUnit.net 00:00:01.71]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.83]       Expected result.ExitCode to be 2 because invalid arguments should return exit code 2, but found 64 (difference of 62).&#xD;
[xUnit.net 00:00:01.84]       Stack Trace:&#xD;
[xUnit.net 00:00:01.84]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.84]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.84]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.84]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.84]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.84]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.84]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.84]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(199,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat()&#xD;
[xUnit.net 00:00:01.84]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.84]       Output:&#xD;
[xUnit.net 00:00:01.84]         Command: invalid-command --badarg value&#xD;
[xUnit.net 00:00:01.84]         Exit Code: 64&#xD;
[xUnit.net 00:00:01.84]         Execution Time: 146ms&#xD;
[xUnit.net 00:00:01.84]         Output: &#xD;
[xUnit.net 00:00:01.84]         Error: {&#xD;
[xUnit.net 00:00:01.84]           "schema": "stroll.history.v1",&#xD;
[xUnit.net 00:00:01.84]           "ok": false,&#xD;
[xUnit.net 00:00:01.84]           "error": {&#xD;
[xUnit.net 00:00:01.84]             "code": "USAGE",&#xD;
[xUnit.net 00:00:01.84]             "message": "unknown command \u0027invalid-command\u0027",&#xD;
[xUnit.net 00:00:01.84]             "hint": "try: stroll.history discover"&#xD;
[xUnit.net 00:00:01.84]           }&#xD;
[xUnit.net 00:00:01.84]         }&#xD;
[xUnit.net 00:00:01.84]         &#xD;
[xUnit.net 00:00:01.87]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.87]       Stack Trace:&#xD;
[xUnit.net 00:00:01.87]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.87]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.87]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(54,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol)&#xD;
[xUnit.net 00:00:01.87]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.00]       Expected result.ExitCode to be 3 because data not found should return exit code 3, but found 0 (difference of -3).&#xD;
[xUnit.net 00:00:02.00]       Stack Trace:&#xD;
[xUnit.net 00:00:02.00]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.00]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.00]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.00]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.00]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.00]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.00]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.00]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(130,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError()&#xD;
[xUnit.net 00:00:02.00]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.00]       Output:&#xD;
[xUnit.net 00:00:02.00]         Command: get-bars --symbol INVALID_SYMBOL_XYZ --from 2024-01-01 --to 2024-01-31&#xD;
[xUnit.net 00:00:02.00]         Exit Code: 0&#xD;
[xUnit.net 00:00:02.00]         Execution Time: 154ms&#xD;
[xUnit.net 00:00:02.00]         Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"INVALID_SYMBOL_XYZ","granularity":"1m","from":"2024-01-01","to":"2024-01-31","bars":[]},"meta":{"count":0,"timestamp":"2025-08-25T20:22:44.662Z"}}&#xD;
[xUnit.net 00:00:02.00]         &#xD;
[xUnit.net 00:00:02.02]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:02.02]       Stack Trace:&#xD;
[xUnit.net 00:00:02.02]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:02.02]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:02.02]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(54,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol)&#xD;
[xUnit.net 00:00:02.02]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.15]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:02.15]       Stack Trace:&#xD;
[xUnit.net 00:00:02.15]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:02.15]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:02.15]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(54,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol)&#xD;
[xUnit.net 00:00:02.15]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.19]       Expected result.ExecutionTimeMs to be less than or equal to 50L because monthly expiry options must meet SLO (&lt;50ms), but found 192L (difference of 142).&#xD;
[xUnit.net 00:00:02.19]       Stack Trace:&#xD;
[xUnit.net 00:00:02.19]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.19]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.19]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.19]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.19]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.19]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.19]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.19]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.19]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(151,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(String date, String description)&#xD;
[xUnit.net 00:00:02.19]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.19]       Output:&#xD;
[xUnit.net 00:00:02.19]         Command: get-options --symbol SPY --date 2024-01-31&#xD;
[xUnit.net 00:00:02.19]         Exit Code: 0&#xD;
[xUnit.net 00:00:02.19]         Execution Time: 192ms&#xD;
[xUnit.net 00:00:02.19]         Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"SPY","expiry":"2024-01-31","chain":[]},"meta":{"count":0,"timestamp":"2025-08-25T20:22:44.816Z"}}&#xD;
[xUnit.net 00:00:02.19]         &#xD;
[xUnit.net 00:00:02.35]       Expected avgLatency to be less than or equal to 100.0 because Initialization should not severely impact response times, but found 132.8 (difference of 32.80000000000001).&#xD;
[xUnit.net 00:00:02.35]       Stack Trace:&#xD;
[xUnit.net 00:00:02.35]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.35]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.35]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.35]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.35]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.35]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.35]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.35]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.35]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(267,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests()&#xD;
[xUnit.net 00:00:02.35]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.37]       Expected result.ExecutionTimeMs to be less than or equal to 30L because weekly expiry options must meet SLO (&lt;30ms), but found 172L (difference of 142).&#xD;
[xUnit.net 00:00:02.37]       Stack Trace:&#xD;
[xUnit.net 00:00:02.37]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.37]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.37]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.37]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.37]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.37]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.37]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.37]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.37]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(151,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(String date, String description)&#xD;
[xUnit.net 00:00:02.37]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.37]       Output:&#xD;
[xUnit.net 00:00:02.37]         Command: get-options --symbol SPY --date 2024-01-19&#xD;
[xUnit.net 00:00:02.37]         Exit Code: 0&#xD;
[xUnit.net 00:00:02.37]         Execution Time: 172ms&#xD;
[xUnit.net 00:00:02.37]         Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"SPY","expiry":"2024-01-19","chain":[]},"meta":{"count":0,"timestamp":"2025-08-25T20:22:45.011Z"}}&#xD;
[xUnit.net 00:00:02.37]         &#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      IpcTestFixture initialization completed successfully&#xD;
[xUnit.net 00:00:02.44]       Expected result.ExitCode to be one of {0, 3} because OIH should either succeed (0) or report no data (3), not fail completely, but found -1.&#xD;
[xUnit.net 00:00:02.44]       Stack Trace:&#xD;
[xUnit.net 00:00:02.44]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.44]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.44]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.44]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.44]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.44]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.44]            at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.44]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(167,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol)&#xD;
[xUnit.net 00:00:02.44]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.44]       Output:&#xD;
[xUnit.net 00:00:02.44]         Oil/Energy symbol OIH not available: Exit=-1, Output=&#xD;
[xUnit.net 00:00:02.47]       Expected result.ExitCode to be 0 because discover must succeed for baseline measurement, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:02.47]       Stack Trace:&#xD;
[xUnit.net 00:00:02.47]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.47]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.47]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.47]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.47]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.47]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.47]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.47]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(46,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO()&#xD;
[xUnit.net 00:00:02.47]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.50]       Expected result.ExitCode to be 0 because get-bars single_month must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:02.50]       Stack Trace:&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.50]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(90,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario)&#xD;
[xUnit.net 00:00:02.50]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.50]       Expected result.ExitCode to be one of {0, 3} because XLE should either succeed (0) or report no data (3), not fail completely, but found -1.&#xD;
[xUnit.net 00:00:02.50]       Stack Trace:&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.50]            at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.50]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(167,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol)&#xD;
[xUnit.net 00:00:02.50]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.50]       Output:&#xD;
[xUnit.net 00:00:02.50]         Oil/Energy symbol XLE not available: Exit=-1, Output=&#xD;
[xUnit.net 00:00:02.51]       Expected result.ExitCode to be one of {0, 3} because BOIL should either succeed (0) or report no data (3), not fail completely, but found -1.&#xD;
[xUnit.net 00:00:02.51]       Stack Trace:&#xD;
[xUnit.net 00:00:02.51]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.51]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.51]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.51]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.51]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.51]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.51]            at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.51]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(167,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol)&#xD;
[xUnit.net 00:00:02.51]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.51]       Output:&#xD;
[xUnit.net 00:00:02.51]         Oil/Energy symbol BOIL not available: Exit=-1, Output=&#xD;
[xUnit.net 00:00:02.53]       Expected result.ExitCode to be 0 because get-bars single_week must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:02.53]       Stack Trace:&#xD;
[xUnit.net 00:00:02.53]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.53]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.53]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.53]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.53]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.53]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.53]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.53]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(90,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario)&#xD;
[xUnit.net 00:00:02.53]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.56]       Expected result.ExitCode to be 0 because get-bars single_day must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:02.56]       Stack Trace:&#xD;
[xUnit.net 00:00:02.56]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.56]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.56]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.56]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.56]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.56]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.56]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.57]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(90,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario)&#xD;
[xUnit.net 00:00:02.57]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.57]       Expected result.ExitCode to be one of {0, 3} because UNG should either succeed (0) or report no data (3), not fail completely, but found -1.&#xD;
[xUnit.net 00:00:02.57]       Stack Trace:&#xD;
[xUnit.net 00:00:02.57]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.57]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.57]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.57]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.57]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.57]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.57]            at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.57]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(167,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol)&#xD;
[xUnit.net 00:00:02.57]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.57]       Output:&#xD;
[xUnit.net 00:00:02.57]         Oil/Energy symbol UNG not available: Exit=-1, Output=&#xD;
[xUnit.net 00:00:02.58]       Expected result.ExitCode to be one of {0, 3} because DRIP should either succeed (0) or report no data (3), not fail completely, but found -1.&#xD;
[xUnit.net 00:00:02.58]       Stack Trace:&#xD;
[xUnit.net 00:00:02.58]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:02.58]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:02.58]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:02.58]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.58]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:02.58]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:02.58]            at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:02.58]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(167,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol)&#xD;
[xUnit.net 00:00:02.58]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:02.58]       Output:&#xD;
[xUnit.net 00:00:02.58]         Oil/Energy symbol DRIP not available: Exit=-1, Output=&#xD;
warn: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server not responsive, restarting...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      Ensuring Stroll.History IPC server is running...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        ProcessId: stroll.history.ipc&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Executable: dotnet&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Pipe Name: stroll.history.server&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Arguments: run --project Stroll.Historical.csproj -- ipc-server&#xD;
[xUnit.net 00:00:13.04]       Expected p50 to be less than or equal to 3L because Process spawn P50 must be ≤3ms, but found 128L (difference of 125).&#xD;
[xUnit.net 00:00:13.04]       Stack Trace:&#xD;
[xUnit.net 00:00:13.04]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:13.04]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:13.04]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:13.04]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:13.04]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:13.04]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:13.04]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(97,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO()&#xD;
[xUnit.net 00:00:13.04]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:13.04]       Output:&#xD;
[xUnit.net 00:00:13.04]         Process Spawn: P50=128ms, P95=148ms&#xD;
[xUnit.net 00:00:13.22]       Expected successCount to be 8 because All concurrent requests must succeed, but found 5.&#xD;
[xUnit.net 00:00:13.22]       Stack Trace:&#xD;
[xUnit.net 00:00:13.22]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:13.22]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:13.22]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:13.22]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:13.22]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:13.22]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(238,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients()&#xD;
[xUnit.net 00:00:13.22]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:13.22]       Output:&#xD;
[xUnit.net 00:00:13.22]         Client 0: -1, 24ms&#xD;
[xUnit.net 00:00:13.22]         Client 1: -1, 28ms&#xD;
[xUnit.net 00:00:13.22]         Client 2: -1, 42ms&#xD;
[xUnit.net 00:00:13.22]         Client 6: 0, 180ms&#xD;
[xUnit.net 00:00:13.22]         Client 4: 0, 180ms&#xD;
[xUnit.net 00:00:13.22]         Client 5: 0, 180ms&#xD;
[xUnit.net 00:00:13.22]         Client 7: 0, 180ms&#xD;
[xUnit.net 00:00:13.22]         Client 3: 0, 180ms&#xD;
\u001b[38;5;9m  _   _   ____                        _                       ____  \u001b[0m            &#xD;
\u001b[38;5;9m | \ | | | __ )    ___    _ __ ___   | |__     ___   _ __    | ___| \u001b[0m            &#xD;
\u001b[38;5;9m |  \| | |  _ \   / _ \  | '_ ` _ \  | '_ \   / _ \ | '__|   |___ \ \u001b[0m            &#xD;
\u001b[38;5;9m | |\  | | |_) | | (_) | | | | | | | | |_) | |  __/ | |       ___) |\u001b[0m            &#xD;
\u001b[38;5;9m |_| \_| |____/   \___/  |_| |_| |_| |_.__/   \___| |_|      |____/ \u001b[0m            &#xD;
\u001b[38;5;9m                                                                    \u001b[0m            &#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] NBomber \u001b[38;5;10m"5.1.0"\u001b[0m started a new session: \u001b[38;5;10m"2025-08-25_20.22.21_session_3616b42d"\u001b[0m&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] NBomber started as single node&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] License validation....&#xD;
21:22:57 [\u001b[38;5;11mWRN\u001b[0m] THIS VERSION IS FREE ONLY FOR PERSONAL USE. You can't use it for an &#xD;
organization.&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] Reports folder: \u001b[38;5;10m"C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\r\u001b[0m&#xD;
\u001b[38;5;10meports\2025-08-25_20.22.21_session_3616b42d"\u001b[0m&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] Plugins: no plugins were loaded&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] Reporting sinks: no reporting sinks were loaded&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] Starting init...&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] Target scenarios: \u001b[38;5;10m"concurrent_get_bars"\u001b[0m&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] Init finished&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] Starting warm up...&#xD;
21:22:57 [\u001b[38;5;39mINF\u001b[0m] Warm up for scenarios: \u001b[38;5;10m"concurrent_get_bars"\u001b[0m&#xD;
[xUnit.net 00:00:18.07]       System.InvalidOperationException : Process stroll.history.ipc failed startup validation&#xD;
[xUnit.net 00:00:18.07]       Stack Trace:&#xD;
[xUnit.net 00:00:18.07]         C:\code\Stroll\Stroll.Runtime\Stroll.Process\ProcessManager.cs(58,0): at Stroll.Process.ProcessManager.EnsureProcessAsync(String processId, ProcessSpec spec)&#xD;
[xUnit.net 00:00:18.07]         C:\code\Stroll\Stroll.Runtime\Stroll.Process\IpcProcessManager.cs(36,0): at Stroll.Process.IpcProcessManager.EnsureIpcServerAsync(String processId, String executablePath, String pipeName, String[] arguments, String workingDirectory)&#xD;
[xUnit.net 00:00:18.07]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcTestFixture.cs(40,0): at Stroll.History.Integrity.Tests.IpcTestFixture.EnsureStrollHistoryIpcServerAsync()&#xD;
[xUnit.net 00:00:18.07]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcTestFixture.cs(167,0): at Stroll.History.Integrity.Tests.IpcTestBase.EnsureIpcServerAsync()&#xD;
[xUnit.net 00:00:18.07]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcTestFixture.cs(182,0): at Stroll.History.Integrity.Tests.IpcTestBase.InitializeAsync()&#xD;
warn: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server not responsive, restarting...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      Ensuring Stroll.History IPC server is running...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        ProcessId: stroll.history.ipc&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Executable: dotnet&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Pipe Name: stroll.history.server&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Arguments: run --project Stroll.Historical.csproj -- ipc-server&#xD;
[xUnit.net 00:00:24.15]       Expected avgLatency to be less than or equal to 50.0 because Average latency must recover to &lt;50ms, but found 529.6666666666666 (difference of 479.66666666666663).&#xD;
[xUnit.net 00:00:24.15]       Stack Trace:&#xD;
[xUnit.net 00:00:24.15]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:24.15]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:24.15]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:24.15]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:24.15]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:24.15]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:24.15]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(209,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully()&#xD;
[xUnit.net 00:00:24.15]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:24.15]       Output:&#xD;
[xUnit.net 00:00:24.15]         Error Recovery: Success Rate=90.00%, Avg Latency=529.7ms&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:00:30.46]       System.InvalidOperationException : Sequence contains no elements&#xD;
[xUnit.net 00:00:30.46]       Stack Trace:&#xD;
[xUnit.net 00:00:30.46]            at System.Linq.ThrowHelper.ThrowNoElementsException()&#xD;
[xUnit.net 00:00:30.46]            at System.Linq.Enumerable.Average[TSource,TAccumulator,TResult](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:30.46]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(170,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits()&#xD;
[xUnit.net 00:00:30.46]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:38.38]       System.InvalidOperationException : Could not connect to any IPC pipe&#xD;
[xUnit.net 00:00:38.38]       Stack Trace:&#xD;
[xUnit.net 00:00:38.38]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(409,0): at Stroll.History.Integrity.Tests.IpcContractTests.ConnectToIpcServer(Int32 timeoutMs)&#xD;
[xUnit.net 00:00:38.38]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(269,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat()&#xD;
[xUnit.net 00:00:38.38]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:38.38]       Output:&#xD;
[xUnit.net 00:00:38.38]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:00:38.38]         Connection attempt to stroll.history.server failed: The operation has timed out.&#xD;
warn: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server not responsive, restarting...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      Ensuring Stroll.History IPC server is running...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        ProcessId: stroll.history.ipc&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Executable: dotnet&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Pipe Name: stroll.history.server&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Arguments: run --project Stroll.Historical.csproj -- ipc-server&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
21:23:28 [\u001b[38;5;39mINF\u001b[0m] Starting bombing...&#xD;
[xUnit.net 00:00:50.65]       System.IO.IOException : Pipe is broken.&#xD;
[xUnit.net 00:00:50.65]       Stack Trace:&#xD;
[xUnit.net 00:00:50.65]            at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
[xUnit.net 00:00:50.65]            at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
[xUnit.net 00:00:50.65]            at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
[xUnit.net 00:00:50.65]            at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
[xUnit.net 00:00:50.65]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(419,0): at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs)&#xD;
[xUnit.net 00:00:50.65]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(321,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses()&#xD;
[xUnit.net 00:00:50.65]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:50.65]       Output:&#xD;
[xUnit.net 00:00:50.65]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:00:55.72]       System.IO.IOException : Pipe is broken.&#xD;
[xUnit.net 00:00:55.72]       Stack Trace:&#xD;
[xUnit.net 00:00:55.72]            at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
[xUnit.net 00:00:55.72]            at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
[xUnit.net 00:00:55.72]            at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
[xUnit.net 00:00:55.72]            at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
[xUnit.net 00:00:55.72]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(419,0): at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs)&#xD;
[xUnit.net 00:00:55.72]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(246,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently()&#xD;
[xUnit.net 00:00:55.72]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:55.72]       Output:&#xD;
[xUnit.net 00:00:55.72]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:01:00.81]       System.IO.IOException : Pipe is broken.&#xD;
[xUnit.net 00:01:00.81]       Stack Trace:&#xD;
[xUnit.net 00:01:00.81]            at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
[xUnit.net 00:01:00.81]            at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
[xUnit.net 00:01:00.81]            at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
[xUnit.net 00:01:00.81]            at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
[xUnit.net 00:01:00.81]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(419,0): at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs)&#xD;
[xUnit.net 00:01:00.81]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(361,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle()&#xD;
[xUnit.net 00:01:00.81]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:00.81]       Output:&#xD;
[xUnit.net 00:01:00.81]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:01:11.31]       System.InvalidOperationException : Sequence contains no elements&#xD;
[xUnit.net 00:01:11.31]       Stack Trace:&#xD;
[xUnit.net 00:01:11.31]            at System.Linq.ThrowHelper.ThrowNoElementsException()&#xD;
[xUnit.net 00:01:11.31]            at System.Linq.Enumerable.Average[TSource,TSelector,TAccumulator,TResult](IEnumerable`1 source, Func`2 selector)&#xD;
[xUnit.net 00:01:11.31]            at System.Linq.Enumerable.Average[TSource](IEnumerable`1 source, Func`2 selector)&#xD;
[xUnit.net 00:01:11.31]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(215,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections()&#xD;
[xUnit.net 00:01:11.31]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:11.31]       Output:&#xD;
[xUnit.net 00:01:11.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:11.31]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:11.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:11.31]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:11.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:11.31]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:11.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:11.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:11.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:11.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:11.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:11.31]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:11.31]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:11.31]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:11.31]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:11.31]         Client connection failed: Pipe is broken.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:01:16.31]       System.IO.IOException : Pipe is broken.&#xD;
[xUnit.net 00:01:16.31]       Stack Trace:&#xD;
[xUnit.net 00:01:16.31]            at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
[xUnit.net 00:01:16.31]            at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
[xUnit.net 00:01:16.31]            at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
[xUnit.net 00:01:16.31]            at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
[xUnit.net 00:01:16.31]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(88,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat()&#xD;
[xUnit.net 00:01:16.31]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:16.31]       Output:&#xD;
[xUnit.net 00:01:16.31]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
21:24:02 [\u001b[38;5;39mINF\u001b[0m] Stopping scenarios...&#xD;
21:24:02 [\u001b[38;5;39mINF\u001b[0m] Calculating final statistics...&#xD;
���������������������������������� test info �����������������������������������&#xD;
test suite: \u001b[38;5;10mnbomber_default_test_suite_name\u001b[0m&#xD;
test name: \u001b[38;5;10mnbomber_default_test_name\u001b[0m&#xD;
session id: \u001b[38;5;10m2025-08-25_20.22.21_session_3616b42d\u001b[0m&#xD;
�������������������������������� scenario stats ��������������������������������&#xD;
scenario: \u001b[38;5;10mconcurrent_get_bars\u001b[0m&#xD;
  - ok count: \u001b[38;5;10m1498\u001b[0m&#xD;
  - fail count: \u001b[38;5;9m0\u001b[0m&#xD;
  - all data: \u001b[38;5;10m0\u001b[0m MB&#xD;
  - duration: \u001b[38;5;10m00:00:30\u001b[0m&#xD;
load simulations: &#xD;
  - \u001b[38;5;10minject\u001b[0m, rate: \u001b[38;5;10m50\u001b[0m, interval: \u001b[38;5;10m00:00:01\u001b[0m, during: \u001b[38;5;10m00:00:30\u001b[0m&#xD;
������������������������������������������������������������������������������Ŀ&#xD;
�               step � ok stats                                                �&#xD;
������������������������������������������������������������������������������Ĵ&#xD;
�               name � \u001b[38;5;39mglobal information\u001b[0m                                      �&#xD;
�      request count � all = \u001b[38;5;10m1498\u001b[0m, ok = \u001b[38;5;10m1498\u001b[0m, RPS = \u001b[38;5;10m49.9\u001b[0m                       �&#xD;
�            latency � min = \u001b[38;5;10m122.58\u001b[0m, mean = \u001b[38;5;10m212.66\u001b[0m, max = \u001b[38;5;10m491.08\u001b[0m, StdDev =     �&#xD;
�                    � \u001b[38;5;10m51.21\u001b[0m                                                   �&#xD;
� latency percentile � p50 = \u001b[38;5;10m202.5\u001b[0m, p75 = \u001b[38;5;10m237.57\u001b[0m, p95 = \u001b[38;5;10m313.34\u001b[0m, p99 = \u001b[38;5;10m374.02\u001b[0m   �&#xD;
��������������������������������������������������������������������������������&#xD;
21:24:03 [\u001b[38;5;39mINF\u001b[0m] Reports saved in folder: \u001b[38;5;10m"C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\r\u001b[0m&#xD;
\u001b[38;5;10meports\2025-08-25_20.22.21_session_3616b42d"\u001b[0m&#xD;
21:24:03 [\u001b[38;5;11mWRN\u001b[0m] THIS VERSION IS FREE ONLY FOR PERSONAL USE. You can't use it for an &#xD;
organization.&#xD;
[xUnit.net 00:01:20.58]       Expected avgLatency to be less than or equal to 25.0 because Average latency must be ≤25ms under concurrent load, but found 51.21 (difference of 26.21).&#xD;
[xUnit.net 00:01:20.58]       Stack Trace:&#xD;
[xUnit.net 00:01:20.58]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:01:20.58]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:01:20.58]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:01:20.58]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:01:20.58]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:01:20.58]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:01:20.58]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(203,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.LoadTest_ConcurrentRequests_MustMaintainThroughputSLO()&#xD;
[xUnit.net 00:01:20.58]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:20.58]       Output:&#xD;
[xUnit.net 00:01:20.58]         Load Test Results: 1498 successful requests, 0.00% error rate, 51.21ms avg latency&#xD;
[xUnit.net 00:01:20.59]       System.ComponentModel.Win32Exception : An error occurred trying to start process 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\..\..\..\..\Stroll.Historical\bin\Debug\net9.0\Stroll.Historical.exe' with working directory 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0'. Access is denied.&#xD;
[xUnit.net 00:01:20.59]       Stack Trace:&#xD;
[xUnit.net 00:01:20.59]            at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)&#xD;
[xUnit.net 00:01:20.59]            at System.Diagnostics.Process.Start()&#xD;
[xUnit.net 00:01:20.59]            at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)&#xD;
[xUnit.net 00:01:20.59]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(319,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.ExecuteCliCommand(String arguments)&#xD;
[xUnit.net 00:01:20.59]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(130,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(String symbol, String date, String scenario)&#xD;
[xUnit.net 00:01:20.59]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:20.62]       Expected result.ExitCode to be 0 because get-options monthly must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:01:20.62]       Stack Trace:&#xD;
[xUnit.net 00:01:20.62]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:01:20.62]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:01:20.62]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:01:20.62]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:01:20.62]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:01:20.62]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(133,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(String symbol, String date, String scenario)&#xD;
[xUnit.net 00:01:20.62]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:31.32]       Expected connectionSucceeded to be true because IPC server must be accessible via Named Pipe, but found False.&#xD;
[xUnit.net 00:01:31.32]       Stack Trace:&#xD;
[xUnit.net 00:01:31.32]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:01:31.32]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:01:31.32]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:01:31.32]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:01:31.32]            at FluentAssertions.Primitives.BooleanAssertions`1.BeTrue(String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:01:31.32]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(65,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcServer_Startup_MustCreateNamedPipeWithStandardName()&#xD;
[xUnit.net 00:01:31.32]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:31.32]       Output:&#xD;
[xUnit.net 00:01:31.32]         Testing IPC server pipe name conventions...&#xD;
[xUnit.net 00:01:31.32]         Failed to connect to stroll.history: The operation has timed out.&#xD;
[xUnit.net 00:01:31.32]         Failed to connect to stroll.history.41212: The operation has timed out.&#xD;
[xUnit.net 00:01:31.32]         Failed to connect to stroll.history.server: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      IpcTestFixture disposing...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      IpcTestFixture disposed successfully&#xD;
[xUnit.net 00:01:31.33]   Finished:    Stroll.History.Integrity.Tests&#xD;
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:43.4661244+01:00">
        <Text>[xUnit.net 00:00:00.77]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:43.6539061+01:00">
        <Text>[xUnit.net 00:00:00.96]     Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:43.8032225+01:00">
        <Text>[xUnit.net 00:00:01.11]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: "SPY") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:43.8083559+01:00">
        <Text>[xUnit.net 00:00:01.11]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Version_MustReturnValidVersionSchema [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:43.9519351+01:00">
        <Text>[xUnit.net 00:00:01.26]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: "USO") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.1097973+01:00">
        <Text>[xUnit.net 00:00:01.41]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: "QQQ") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.2182556+01:00">
        <Text>[xUnit.net 00:00:01.52]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.2521997+01:00">
        <Text>[xUnit.net 00:00:01.56]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: "XLE") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.3806676+01:00">
        <Text>[xUnit.net 00:00:01.68]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.4087815+01:00">
        <Text>[xUnit.net 00:00:01.71]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: "USO") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.5292248+01:00">
        <Text>[xUnit.net 00:00:01.83]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.5639049+01:00">
        <Text>[xUnit.net 00:00:01.87]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: "QQQ") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.6911722+01:00">
        <Text>[xUnit.net 00:00:02.00]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.7166949+01:00">
        <Text>[xUnit.net 00:00:02.02]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: "XLE") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.8483420+01:00">
        <Text>[xUnit.net 00:00:02.15]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: "SPY") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:44.8866379+01:00">
        <Text>[xUnit.net 00:00:02.19]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: "2024-01-31", description: "monthly expiry") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.0498852+01:00">
        <Text>[xUnit.net 00:00:02.35]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.0614928+01:00">
        <Text>[xUnit.net 00:00:02.37]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: "2024-01-19", description: "weekly expiry") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.1350789+01:00">
        <Text>[xUnit.net 00:00:02.44]     Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: "OIH") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.1680810+01:00">
        <Text>[xUnit.net 00:00:02.47]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.1960135+01:00">
        <Text>[xUnit.net 00:00:02.50]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: "SPY", from: "2024-01-01", to: "2024-01-31", granularity: "1d", scenario: "single_month") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.1978027+01:00">
        <Text>[xUnit.net 00:00:02.50]     Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: "XLE") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.2050928+01:00">
        <Text>[xUnit.net 00:00:02.51]     Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: "BOIL") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.2275898+01:00">
        <Text>[xUnit.net 00:00:02.53]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: "SPY", from: "2024-01-01", to: "2024-01-07", granularity: "1d", scenario: "single_week") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.2605328+01:00">
        <Text>[xUnit.net 00:00:02.56]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: "SPY", from: "2024-01-15", to: "2024-01-15", granularity: "1d", scenario: "single_day") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.2622741+01:00">
        <Text>[xUnit.net 00:00:02.57]     Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: "UNG") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:45.2723424+01:00">
        <Text>[xUnit.net 00:00:02.58]     Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: "DRIP") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:55.7348714+01:00">
        <Text>[xUnit.net 00:00:13.04]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:22:55.9187560+01:00">
        <Text>[xUnit.net 00:00:13.22]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:00.7639149+01:00">
        <Text>[xUnit.net 00:00:18.07]     Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Performance_MustMeetLatencySLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:06.8466319+01:00">
        <Text>[xUnit.net 00:00:24.15]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:13.1552037+01:00">
        <Text>[xUnit.net 00:00:30.46]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:21.0765659+01:00">
        <Text>[xUnit.net 00:00:38.38]     Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:33.3431287+01:00">
        <Text>[xUnit.net 00:00:50.65]     Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:38.4144423+01:00">
        <Text>[xUnit.net 00:00:55.72]     Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:43.5046030+01:00">
        <Text>[xUnit.net 00:01:00.81]     Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:54.0086826+01:00">
        <Text>[xUnit.net 00:01:11.31]     Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:23:59.0043113+01:00">
        <Text>[xUnit.net 00:01:16.31]     Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:24:03.2796882+01:00">
        <Text>[xUnit.net 00:01:20.58]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.LoadTest_ConcurrentRequests_MustMaintainThroughputSLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:24:03.2901353+01:00">
        <Text>[xUnit.net 00:01:20.59]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: "SPY", date: "2024-01-19", scenario: "weekly") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:24:03.3109516+01:00">
        <Text>[xUnit.net 00:01:20.62]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: "SPY", date: "2024-01-31", scenario: "monthly") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:24:14.0133202+01:00">
        <Text>[xUnit.net 00:01:31.32]     Stroll.History.Integrity.Tests.IpcContractTests.IpcServer_Startup_MustCreateNamedPipeWithStandardName [FAIL]</Text>
      </RunInfo>
    </RunInfos>
  </ResultSummary>
</TestRun>