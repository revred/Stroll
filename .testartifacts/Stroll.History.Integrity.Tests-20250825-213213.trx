<?xml version="1.0" encoding="utf-8"?>
<TestRun id="b377c170-8fc4-4c4e-82f4-e4c2a51c2506" name="revanur@SONAKSHI 2025-08-25 21:32:16" runUser="SONAKSHI\revanur" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2025-08-25T21:32:16.3288158+01:00" queuing="2025-08-25T21:32:16.3288163+01:00" start="2025-08-25T21:32:15.2302338+01:00" finish="2025-08-25T21:33:35.2647362+01:00" />
  <TestSettings name="default" id="1667b866-920f-44ef-9d7d-56bd29f89264">
    <Deployment runDeploymentRoot="revanur_SONAKSHI_2025-08-25_21_32_16" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="c526a6d1-3f94-4af4-9fc2-d1b513d825e4" testId="669a21aa-c949-333b-2581-d8d519a421f7" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, date: &quot;2024-01-31&quot;, scenario: &quot;monthly&quot;)" computerName="SONAKSHI" duration="00:00:00.0086072" startTime="2025-08-25T21:33:35.1787350+01:00" endTime="2025-08-25T21:33:35.1787353+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c526a6d1-3f94-4af4-9fc2-d1b513d825e4">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because get-options monthly must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(String symbol, String date, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 142&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="611abf0b-6eab-4b61-88b6-6ddd0a3af963" testId="f12d43d6-09ca-94cc-3081-2e6b5b79a2f5" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently" computerName="SONAKSHI" duration="00:00:04.9914194" startTime="2025-08-25T21:33:04.4397403+01:00" endTime="2025-08-25T21:33:04.4397406+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="611abf0b-6eab-4b61-88b6-6ddd0a3af963">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.IO.IOException : Pipe is broken.</Message>
          <StackTrace>   at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
   at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
   at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 419&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 246&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="43dc8777-59d7-46a7-9608-465290633b6b" testId="34c2d878-9f9a-c3fb-f608-685427dd1ff8" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.MultiSymbol_ConsistentResponse_MustHaveSameSchema" computerName="SONAKSHI" duration="00:00:00.7273572" startTime="2025-08-25T21:32:20.4728986+01:00" endTime="2025-08-25T21:32:20.4728989+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="43dc8777-59d7-46a7-9608-465290633b6b">
      <Output>
        <StdOut>Schema consistency validated across 3 symbols</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc20ac5b-3722-4dce-8d4f-07c2dc004408" testId="d50dac0e-a7de-09cc-da1c-bc348c29be5f" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;XOP&quot;)" computerName="SONAKSHI" duration="00:00:00.0110624" startTime="2025-08-25T21:32:17.3664673+01:00" endTime="2025-08-25T21:32:17.3664675+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc20ac5b-3722-4dce-8d4f-07c2dc004408">
      <Output>
        <StdOut>Oil/Energy symbol XOP not available: Exit=-1, Output=</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be one of {0, 3} because XOP should either succeed (0) or report no data (3), not fail completely, but found -1.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 179&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7a200ebf-6dca-45e3-95a5-5a2f036bf6cb" testId="b82280b4-dbf6-d42b-a3fb-284005534d07" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections" computerName="SONAKSHI" duration="00:00:10.0899998" startTime="2025-08-25T21:33:19.5313877+01:00" endTime="2025-08-25T21:33:19.5313880+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7a200ebf-6dca-45e3-95a5-5a2f036bf6cb">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Client connection failed: Pipe is broken.&#xD;
Client connection failed: Pipe is broken.&#xD;
Client connection failed: Pipe is broken.&#xD;
Client connection failed: Pipe is broken.&#xD;
Client connection failed: Pipe is broken.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Client connection failed: Pipe is broken.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Client connection failed: Pipe is broken.&#xD;
Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Client connection failed: Pipe is broken.</StdOut>
        <ErrorInfo>
          <Message>System.InvalidOperationException : Sequence contains no elements</Message>
          <StackTrace>   at System.Linq.ThrowHelper.ThrowNoElementsException()&#xD;
   at System.Linq.Enumerable.Average[TSource,TSelector,TAccumulator,TResult](IEnumerable`1 source, Func`2 selector)&#xD;
   at System.Linq.Enumerable.Average[TSource](IEnumerable`1 source, Func`2 selector)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 215&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f59bf0a1-9c27-4526-83f1-e0def27efbf5" testId="bd89ac76-1178-a9a8-b539-d7abc58c5d5d" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle" computerName="SONAKSHI" duration="00:00:04.9992388" startTime="2025-08-25T21:33:09.4398753+01:00" endTime="2025-08-25T21:33:09.4398758+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f59bf0a1-9c27-4526-83f1-e0def27efbf5">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.IO.IOException : Pipe is broken.</Message>
          <StackTrace>   at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
   at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
   at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 419&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 361&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7035fcf9-3f89-4dbb-bd5a-2eb467937d15" testId="6d82db8f-5e56-2998-5fc5-a4fc1c24ccd8" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;QQQ&quot;, date: &quot;2024-01-19&quot;, description: &quot;weekly&quot;)" computerName="SONAKSHI" duration="00:00:00.1948954" startTime="2025-08-25T21:32:19.7451703+01:00" endTime="2025-08-25T21:32:19.7451706+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7035fcf9-3f89-4dbb-bd5a-2eb467937d15" />
    <UnitTestResult executionId="92a9e17e-42a3-49f5-b7d5-0a2067697de7" testId="9abd53b2-101b-f815-e8cf-0804376ff000" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;OIH&quot;)" computerName="SONAKSHI" duration="00:00:00.0465130" startTime="2025-08-25T21:32:17.4138807+01:00" endTime="2025-08-25T21:32:17.4138814+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92a9e17e-42a3-49f5-b7d5-0a2067697de7">
      <Output>
        <StdOut>Oil/Energy symbol OIH not available: Exit=-1, Output=</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be one of {0, 3} because OIH should either succeed (0) or report no data (3), not fail completely, but found -1.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 179&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6492df90-ba16-4d75-875d-8a04ea0473fd" testId="24742c7d-d023-969a-bdc2-2d3c3debc16b" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears" computerName="SONAKSHI" duration="00:00:00.2087404" startTime="2025-08-25T21:32:15.8458226+01:00" endTime="2025-08-25T21:32:15.8458228+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6492df90-ba16-4d75-875d-8a04ea0473fd">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;LongTermData_Availability_MustSpanMultipleYears&gt;b__10_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 319&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 319&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2c1d8d1-fbe1-45ea-a1f4-500acc6080f2" testId="46f4fb9a-9ec3-3575-6a3e-f54dfe0e0e6b" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully" computerName="SONAKSHI" duration="00:00:10.2298560" startTime="2025-08-25T21:32:39.2224930+01:00" endTime="2025-08-25T21:32:39.2224933+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2c1d8d1-fbe1-45ea-a1f4-500acc6080f2">
      <Output>
        <StdOut>Error Recovery: Success Rate=90.00%, Avg Latency=560.7ms</StdOut>
        <ErrorInfo>
          <Message>Expected avgLatency to be less than or equal to 50.0 because Average latency must recover to &lt;50ms, but found 560.6666666666666 (difference of 510.66666666666663).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 215&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a8cc9f40-3231-46b9-9b3c-9be6c397c990" testId="d868ef31-8c21-5b32-9e1e-7ecb8735d5ce" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;USO&quot;)" computerName="SONAKSHI" duration="00:00:00.2149808" startTime="2025-08-25T21:32:16.8877811+01:00" endTime="2025-08-25T21:32:16.8877819+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a8cc9f40-3231-46b9-9b3c-9be6c397c990">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 66&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d4930b1a-4746-4314-b8e2-60eccd33765c" testId="a0f2be1f-6a20-f77c-a432-095aad79f209" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.GracefulShutdown_MustCompleteWithinTimeout" computerName="SONAKSHI" duration="00:00:00.9974254" startTime="2025-08-25T21:32:28.9912831+01:00" endTime="2025-08-25T21:32:28.9912834+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d4930b1a-4746-4314-b8e2-60eccd33765c">
      <Output>
        <StdOut>Graceful shutdown completed in 0ms</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="326c2ea2-8437-471b-b859-0d5e75f52584" testId="73faff17-d744-8883-57fa-d6a3005947d4" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;DRIP&quot;)" computerName="SONAKSHI" duration="00:00:00.2245116" startTime="2025-08-25T21:32:18.2310560+01:00" endTime="2025-08-25T21:32:18.2310564+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="326c2ea2-8437-471b-b859-0d5e75f52584" />
    <UnitTestResult executionId="51eb352b-f9a5-469c-8d11-fa67de94a5a1" testId="2a98c4fa-8bce-0aac-f1e5-20629f4fcd20" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;QQQ&quot;)" computerName="SONAKSHI" duration="00:00:00.1972800" startTime="2025-08-25T21:32:16.4561626+01:00" endTime="2025-08-25T21:32:16.4561628+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="51eb352b-f9a5-469c-8d11-fa67de94a5a1">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 149&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 149&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c99155c8-18ef-444d-b1e6-b6c25b25a498" testId="45ddda53-a0bf-e237-e92e-8d2bacc11893" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;BOIL&quot;)" computerName="SONAKSHI" duration="00:00:00.1706007" startTime="2025-08-25T21:32:17.8225086+01:00" endTime="2025-08-25T21:32:17.8225091+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c99155c8-18ef-444d-b1e6-b6c25b25a498" />
    <UnitTestResult executionId="8226f5e2-3029-4ad6-a970-4cebfca5f5ad" testId="0a60c8d7-ce2e-951c-8c65-0d1888537231" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO" computerName="SONAKSHI" duration="00:00:01.6855709" startTime="2025-08-25T21:32:17.3174793+01:00" endTime="2025-08-25T21:32:17.3174795+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8226f5e2-3029-4ad6-a970-4cebfca5f5ad">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because discover must succeed for baseline measurement, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 52&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3546290e-1086-490c-ab6b-146b5ad30bf4" testId="a97e8704-df43-aa55-d55e-cc7f9f54d62b" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO" computerName="SONAKSHI" duration="00:00:00.0679986" startTime="2025-08-25T21:32:15.7060079+01:00" endTime="2025-08-25T21:32:15.7060203+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3546290e-1086-490c-ab6b-146b5ad30bf4">
      <Output>
        <StdOut>Command: get-bars --symbol SPY --from 2024-01-15 --to 2024-01-15 --granularity 1d&#xD;
Exit Code: -1&#xD;
Execution Time: 13ms&#xD;
Output:</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because valid get-bars request must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 93&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b825078-a718-4ace-9bf7-bba812c19781" testId="9720b5d8-629d-49df-67fd-acba0735f3a3" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses" computerName="SONAKSHI" duration="00:00:05.0737556" startTime="2025-08-25T21:32:59.4475628+01:00" endTime="2025-08-25T21:32:59.4475632+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b825078-a718-4ace-9bf7-bba812c19781">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.IO.IOException : Pipe is broken.</Message>
          <StackTrace>   at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
   at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
   at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 419&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 321&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3b244819-6faa-4d58-a540-a9d3dbf6e8ec" testId="8c252c2d-052d-8947-948e-0317943dbcb9" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, date: &quot;2024-01-19&quot;, scenario: &quot;weekly&quot;)" computerName="SONAKSHI" duration="00:00:00.0101200" startTime="2025-08-25T21:33:35.1685564+01:00" endTime="2025-08-25T21:33:35.1685567+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3b244819-6faa-4d58-a540-a9d3dbf6e8ec">
      <Output>
        <ErrorInfo>
          <Message>System.ComponentModel.Win32Exception : An error occurred trying to start process 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\..\..\..\..\Stroll.Historical\bin\Debug\net9.0\Stroll.Historical.exe' with working directory 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0'. Access is denied.</Message>
          <StackTrace>   at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)&#xD;
   at System.Diagnostics.Process.Start()&#xD;
   at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.ExecuteCliCommand(String arguments) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 331&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(String symbol, String date, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 139&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="36c11cb7-ccbb-4b74-b60c-460b22949797" testId="bf31a76f-3c4d-96bf-54e8-1fab0c1cb5d5" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.LoadTest_ConcurrentRequests_MustMaintainThroughputSLO" computerName="SONAKSHI" duration="00:01:06.0058545" startTime="2025-08-25T21:33:35.1575260+01:00" endTime="2025-08-25T21:33:35.1575262+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="36c11cb7-ccbb-4b74-b60c-460b22949797">
      <Output>
        <StdOut>Load Test Results: 1500 successful requests, 0.00% error rate, 52.61ms avg latency</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2fc4b2aa-1e0f-433f-b412-61b08bf6f4be" testId="7d24f10f-08c2-6db5-865f-0317ad547814" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;XLE&quot;)" computerName="SONAKSHI" duration="00:00:00.2317108" startTime="2025-08-25T21:32:17.6466404+01:00" endTime="2025-08-25T21:32:17.6466408+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2fc4b2aa-1e0f-433f-b412-61b08bf6f4be" />
    <UnitTestResult executionId="083ae491-cd3a-4492-aff3-180447bca6c6" testId="dfe6ee38-021d-7fbf-62be-74dc8f7bd624" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;XLE&quot;)" computerName="SONAKSHI" duration="00:00:00.2085583" startTime="2025-08-25T21:32:16.6669260+01:00" endTime="2025-08-25T21:32:16.6669264+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="083ae491-cd3a-4492-aff3-180447bca6c6">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 149&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 149&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="844a3bbb-bdd3-48ff-9162-cb5829c34227" testId="9013f874-8a4c-4c73-e79f-a509e61da1b6" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;GUSH&quot;)" computerName="SONAKSHI" duration="00:00:00.1418824" startTime="2025-08-25T21:32:18.3737059+01:00" endTime="2025-08-25T21:32:18.3737063+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="844a3bbb-bdd3-48ff-9162-cb5829c34227" />
    <UnitTestResult executionId="2cd157df-9a29-4fa9-b2be-23d56b02f148" testId="ab2b2a05-ed37-b373-0697-8aa7b21d8d5d" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-01&quot;, to: &quot;2024-01-07&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_week&quot;)" computerName="SONAKSHI" duration="00:00:00.0328612" startTime="2025-08-25T21:32:17.3865114+01:00" endTime="2025-08-25T21:32:17.3865117+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2cd157df-9a29-4fa9-b2be-23d56b02f148">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because get-bars single_week must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 96&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0837a8e2-e6f3-4bd9-9bb1-377e96878401" testId="968fccda-0f7b-3d4a-0c3e-3ba8f27712a1" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Version_MustReturnValidVersionSchema" computerName="SONAKSHI" duration="00:00:00.1509646" startTime="2025-08-25T21:32:16.0166144+01:00" endTime="2025-08-25T21:32:16.0166149+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0837a8e2-e6f3-4bd9-9bb1-377e96878401">
      <Output>
        <StdOut>Command: version&#xD;
Exit Code: 0&#xD;
Execution Time: 148ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"service":"stroll.history","version":"1.0.0"}}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f974e274-376d-4cdc-bad7-3208dd078deb" testId="698150cf-a3bf-0a44-9fc6-9e4a7cd1afaf" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;USO&quot;)" computerName="SONAKSHI" duration="00:00:00.2049232" startTime="2025-08-25T21:32:16.2578433+01:00" endTime="2025-08-25T21:32:16.2578437+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f974e274-376d-4cdc-bad7-3208dd078deb">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 149&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 149&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="77e82c02-f1b7-4627-96f6-223c10af7692" testId="6ca5a343-28d2-988e-a3d1-0ac59578c058" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcServer_Startup_MustCreateNamedPipeWithStandardName" computerName="SONAKSHI" duration="00:00:10.0069147" startTime="2025-08-25T21:33:34.5754825+01:00" endTime="2025-08-25T21:33:34.5754827+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="77e82c02-f1b7-4627-96f6-223c10af7692">
      <Output>
        <StdOut>Testing IPC server pipe name conventions...&#xD;
Failed to connect to stroll.history: The operation has timed out.&#xD;
Failed to connect to stroll.history.8704: The operation has timed out.&#xD;
Successfully connected to pipe: stroll.history.server</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d44b228-138a-4d44-8395-85a3342a0f7e" testId="b13f8a79-42f6-99db-717d-12f7ffb70858" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-01&quot;, to: &quot;2024-01-31&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_month&quot;)" computerName="SONAKSHI" duration="00:00:00.0347828" startTime="2025-08-25T21:32:17.3543896+01:00" endTime="2025-08-25T21:32:17.3543907+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d44b228-138a-4d44-8395-85a3342a0f7e">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because get-bars single_month must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 96&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6bd66020-b09d-4009-8a7a-5337b948f5fd" testId="c498f224-7d3c-0cf5-5186-95f77e5a2cd8" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;UNG&quot;)" computerName="SONAKSHI" duration="00:00:00.1828092" startTime="2025-08-25T21:32:18.0056311+01:00" endTime="2025-08-25T21:32:18.0056316+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6bd66020-b09d-4009-8a7a-5337b948f5fd" />
    <UnitTestResult executionId="87a126f1-6a70-49a4-a16f-de9de6fa7fd9" testId="63daa1ce-c43b-f74b-dff2-ca8051321189" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;XLE&quot;)" computerName="SONAKSHI" duration="00:00:00.1609602" startTime="2025-08-25T21:32:17.3016156+01:00" endTime="2025-08-25T21:32:17.3016159+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="87a126f1-6a70-49a4-a16f-de9de6fa7fd9">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 66&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c2c29812-ebee-4936-b40b-7e8c89f18d97" testId="c60bb786-dacb-4f91-d8c0-17001cfed7a7" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat" computerName="SONAKSHI" duration="00:00:00.2510624" startTime="2025-08-25T21:32:17.0846734+01:00" endTime="2025-08-25T21:32:17.0846736+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c2c29812-ebee-4936-b40b-7e8c89f18d97">
      <Output>
        <StdOut>Command: invalid-command --badarg value&#xD;
Exit Code: 64&#xD;
Execution Time: 248ms&#xD;
Output: &#xD;
Error: {&#xD;
  "schema": "stroll.history.v1",&#xD;
  "ok": false,&#xD;
  "error": {&#xD;
    "code": "USAGE",&#xD;
    "message": "unknown command \u0027invalid-command\u0027",&#xD;
    "hint": "try: stroll.history discover"&#xD;
  }&#xD;
}</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 2 because invalid arguments should return exit code 2, but found 64 (difference of 62).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 216&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3332179d-d380-4460-ac46-82b29e19ba91" testId="f0453f9e-8f1b-6bc5-2f7d-f889f91dca59" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation" computerName="SONAKSHI" duration="00:00:00.5580502" startTime="2025-08-25T21:32:16.5789435+01:00" endTime="2025-08-25T21:32:16.5789439+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3332179d-d380-4460-ac46-82b29e19ba91">
      <Output>
        <StdOut>Command: provider-status&#xD;
Exit Code: 0&#xD;
Execution Time: 543ms&#xD;
Output: info: Stroll.Historical.DataAcquisitionEngine[0]&#xD;
      Added Local Historical Data provider&#xD;
info: Stroll.Historical.DataAcquisitionEngine[0]&#xD;
      Added Yahoo Finance provider&#xD;
?? Data Provider Status:&#xD;
&#xD;
? ?? Local Historical Data (Priority: 0)&#xD;
   Available: True&#xD;
   Healthy: False&#xD;
   Response Time: 3ms&#xD;
   Rate Limit: 2147483647/2147483647 per minute&#xD;
&#xD;
? ?? Yahoo Finance (Priority: 1)&#xD;
   Available: True&#xD;
   Healthy: False&#xD;
   Response Time: 275ms&#xD;
   Rate Limit: 30/30 per minute</StdOut>
        <ErrorInfo>
          <Message>System.Text.Json.JsonException : 'i' is an invalid start of a value. Path: $ | LineNumber: 0 | BytePositionInLine: 0.&#xD;
---- System.Text.Json.JsonReaderException : 'i' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 0.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ReThrowWithPath(ReadStack&amp; state, JsonReaderException ex)&#xD;
   at System.Text.Json.Serialization.JsonConverter`1.ReadCore(Utf8JsonReader&amp; reader, T&amp; value, JsonSerializerOptions options, ReadStack&amp; state)&#xD;
   at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.Deserialize(Utf8JsonReader&amp; reader, ReadStack&amp; state)&#xD;
   at System.Text.Json.JsonSerializer.ReadFromSpan[TValue](ReadOnlySpan`1 utf8Json, JsonTypeInfo`1 jsonTypeInfo, Nullable`1 actualByteCount)&#xD;
   at System.Text.Json.JsonSerializer.ReadFromSpan[TValue](ReadOnlySpan`1 json, JsonTypeInfo`1 jsonTypeInfo)&#xD;
   at System.Text.Json.JsonSerializer.Deserialize[TValue](String json, JsonSerializerOptions options)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 193&#xD;
--- End of stack trace from previous location ---&#xD;
----- Inner Stack Trace -----&#xD;
   at System.Text.Json.ThrowHelper.ThrowJsonReaderException(Utf8JsonReader&amp; json, ExceptionResource resource, Byte nextByte, ReadOnlySpan`1 bytes)&#xD;
   at System.Text.Json.Utf8JsonReader.ConsumeValue(Byte marker)&#xD;
   at System.Text.Json.Utf8JsonReader.ReadFirstToken(Byte first)&#xD;
   at System.Text.Json.Utf8JsonReader.ReadSingleSegment()&#xD;
   at System.Text.Json.Utf8JsonReader.Read()&#xD;
   at System.Text.Json.Serialization.JsonConverter`1.ReadCore(Utf8JsonReader&amp; reader, T&amp; value, JsonSerializerOptions options, ReadStack&amp; state)</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f1fc9615-c0a4-4d69-b4d2-be532e4c3f97" testId="a65e01be-e329-9ced-a231-8f240e9dbff3" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;SPY&quot;)" computerName="SONAKSHI" duration="00:00:00.2038607" startTime="2025-08-25T21:32:16.0517214+01:00" endTime="2025-08-25T21:32:16.0517216+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f1fc9615-c0a4-4d69-b4d2-be532e4c3f97">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 149&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
   at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
   at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
   at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
   at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 149&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5929dff5-89c4-40fe-839a-5a551a695335" testId="34d94d2d-122b-5143-8b16-e37fc2f5b7f3" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Discover_MustReturnValidContractSchema" computerName="SONAKSHI" duration="00:00:00.1624684" startTime="2025-08-25T21:32:15.8656781+01:00" endTime="2025-08-25T21:32:15.8656786+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5929dff5-89c4-40fe-839a-5a551a695335">
      <Output>
        <StdOut>Command: discover&#xD;
Exit Code: 0&#xD;
Execution Time: 156ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"service":"stroll.history","version":"1.0.0","env":[{"name":"STROLL_DATA","desc":"dataset root override","required":false}],"commands":[{"name":"version","args":[]},{"name":"discover","args":[]},{"name":"list-datasets","args":[]},{"name":"get-bars","args":[{"name":"symbol","required":true},{"name":"from","required":true,"type":"yyyy-MM-dd"},{"name":"to","required":true,"type":"yyyy-MM-dd"},{"name":"granularity","required":false,"default":"1m","oneOf":["1m","5m","1d"]},{"name":"format","required":false,"default":"json","oneOf":["json","jsonl"]}]},{"name":"get-options","args":[{"name":"symbol","required":true},{"name":"date","required":true,"type":"yyyy-MM-dd"}]},{"name":"acquire-data","args":[{"name":"symbol","required":true},{"name":"from","required":true,"type":"yyyy-MM-dd"},{"name":"to","required":true,"type":"yyyy-MM-dd"},{"name":"interval","required":false,"default":"1d","oneOf":["1d","1h","30m","15m","5m","1m"]},{"name":"output","required":false,"default":"./data"}]},{"name":"provider-status","args":[{"name":"output","required":false,"default":"./data"}]}]}}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2b986b9d-3102-43e1-a6c7-e09bedb5079d" testId="547563c8-101e-3ed7-b3d3-ffeb50de455a" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;OILY&quot;)" computerName="SONAKSHI" duration="00:00:00.2536355" startTime="2025-08-25T21:32:18.8242618+01:00" endTime="2025-08-25T21:32:18.8242622+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2b986b9d-3102-43e1-a6c7-e09bedb5079d" />
    <UnitTestResult executionId="112ccf3a-0e6f-40d7-8e09-6c42f6e553a4" testId="eee663c9-7edd-c938-7bf2-4a34517b3c51" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;QQQ&quot;)" computerName="SONAKSHI" duration="00:00:00.2523070" startTime="2025-08-25T21:32:17.1401857+01:00" endTime="2025-08-25T21:32:17.1401860+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="112ccf3a-0e6f-40d7-8e09-6c42f6e553a4">
      <Output>
        <ErrorInfo>
          <Message>System.FormatException : One of the identified items was in an invalid format.</Message>
          <StackTrace>   at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
   at System.Text.Json.JsonElement.GetDateTime()&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 66&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6986a19a-e6c2-469f-9a53-b704088309da" testId="f7a3ab53-c7e7-2087-a390-a9470fdf08f5" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO" computerName="SONAKSHI" duration="00:00:00.2391758" startTime="2025-08-25T21:32:16.8251600+01:00" endTime="2025-08-25T21:32:16.8251605+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6986a19a-e6c2-469f-9a53-b704088309da">
      <Output>
        <StdOut>Command: get-bars --symbol SPY --from 2024-01-01 --to 2024-01-31 --granularity 1d&#xD;
Exit Code: 0&#xD;
Execution Time: 232ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"SPY","granularity":"1d","from":"2024-01-01","to":"2024-01-31","bars":[{"t":"","o":464.783,"h":466.27,"l":463.14,"c":465.266,"v":124960111,"symbol":"SPY","g":"1d"},{"t":"","o":463.08,"h":463.829,"l":460.856,"c":461.466,"v":105229929,"symbol":"SPY","g":"1d"},{"t":"","o":460.984,"h":463.601,"l":459.752,"c":459.98,"v":85569059,"symbol":"SPY","g":"1d"},{"t":"","o":460.186,"h":463.09,"l":459.142,"c":460.61,"v":87485749,"symbol":"SPY","g":"1d"},{"t":"","o":461.111,"h":467.334,"l":460.984,"c":467.185,"v":76067517,"symbol":"SPY","g":"1d"},{"t":"","o":464.497,"h":467.509,"l":463.986,"c":466.476,"v":66977869,"symbol":"SPY","g":"1d"},{"t":"","o":466.752,"h":469.989,"l":466.466,"c":469.114,"v":68378960,"symbol":"SPY","g":"1d"},{"t":"","o":470.128,"h":470.651,"l":464.881,"c":468.908,"v":79177759,"symbol":"SPY","g":"1d"},{"t":"","o":470.373,"h":471.123,"l":467.805,"c":469.233,"v":58947386,"symbol":"SPY","g":"1d"},{"t":"","o":467.834,"h":469.164,"l":465.669,"c":467.509,"v":86364183,"symbol":"SPY","g":"1d"},{"t":"","o":464.448,"h":465.403,"l":462.53,"c":464.911,"v":69936526,"symbol":"SPY","g":"1d"},{"t":"","o":466.604,"h":469.607,"l":465.039,"c":469.045,"v":93314144,"symbol":"SPY","g":"1d"},{"t":"","o":470.188,"h":475.178,"l":469.091,"c":474.892,"v":112593592,"symbol":"SPY","g":"1d"},{"t":"","o":476.448,"h":477.639,"l":475.237,"c":475.897,"v":77048703,"symbol":"SPY","g":"1d"},{"t":"","o":476.448,"h":477.525,"l":475.345,"c":477.285,"v":50738003,"symbol":"SPY","g":"1d"},{"t":"","o":480.188,"h":481.133,"l":477.307,"c":477.806,"v":83062772,"symbol":"SPY","g":"1d"},{"t":"","o":479.958,"h":480.677,"l":477.806,"c":480.404,"v":73676069,"symbol":"SPY","g":"1d"},{"t":"","o":479.973,"h":481.478,"l":478.939,"c":479.794,"v":77858026,"symbol":"SPY","g":"1d"},{"t":"","o":480.109,"h":483.737,"l":479.558,"c":483.595,"v":62296035,"symbol":"SPY","g":"1d"},{"t":"","o":482.896,"h":483.94,"l":482.453,"c":483.221,"v":59548747,"symbol":"SPY","g":"1d"},{"t":"","o":480.987,"h":481.439,"l":475.316,"c":475.335,"v":128011046,"symbol":"SPY","g":"1d"}]},"meta":{"count":21,"timestamp":"2025-08-25T20:32:16.758Z"}}</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4cfe3169-f092-4b9d-99e7-53a1d7c791ec" testId="63e5e473-b665-c476-0652-077debdb9447" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat" computerName="SONAKSHI" duration="00:00:04.9980180" startTime="2025-08-25T21:33:24.5683882+01:00" endTime="2025-08-25T21:33:24.5683886+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4cfe3169-f092-4b9d-99e7-53a1d7c791ec">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.IO.IOException : Pipe is broken.</Message>
          <StackTrace>   at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
   at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
   at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
   at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 88&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f0d78bfe-203d-4aba-8625-cda0d2800f9c" testId="21515c87-1674-a668-24cd-e7cf0b8b79a6" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ColdStart_Performance_MustMeetBootstrapSLO" computerName="SONAKSHI" duration="00:00:08.1250955" startTime="2025-08-25T21:32:25.3970667+01:00" endTime="2025-08-25T21:32:25.3970669+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f0d78bfe-203d-4aba-8625-cda0d2800f9c">
      <Output>
        <StdOut>Cold start 1: 138ms&#xD;
Cold start 2: 132ms&#xD;
Cold start 3: 132ms&#xD;
Cold start 4: 117ms&#xD;
Cold start 5: 139ms&#xD;
Cold Start Performance: Avg=131.6ms, Max=139ms</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="37d80733-4e00-4cfb-b3c1-b1707671d1d9" testId="d9d5e9cb-812b-39a5-915f-74231facbaf3" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-15&quot;, to: &quot;2024-01-15&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_day&quot;)" computerName="SONAKSHI" duration="00:00:00.0092874" startTime="2025-08-25T21:32:17.3965356+01:00" endTime="2025-08-25T21:32:17.3965361+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="37d80733-4e00-4cfb-b3c1-b1707671d1d9">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because get-bars single_day must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs:line 96&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bfa4ca8e-af6b-44f3-b0f1-107f797c1976" testId="2fdfcb73-88ba-ce23-826c-6777399aa01c" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Performance_MustMeetLatencySLO" computerName="SONAKSHI" duration="00:00:10.0017841" startTime="2025-08-25T21:32:27.8290921+01:00" endTime="2025-08-25T21:32:27.8290922+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bfa4ca8e-af6b-44f3-b0f1-107f797c1976">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history.server failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.InvalidOperationException : Could not connect to any IPC pipe</Message>
          <StackTrace>   at Stroll.History.Integrity.Tests.IpcContractTests.ConnectToIpcServer(Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 409&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Performance_MustMeetLatencySLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 123&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="425b885c-9917-41af-956e-2da3e24cf8a0" testId="d1046a89-ce94-3c20-cf55-15cedf399078" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients" computerName="SONAKSHI" duration="00:00:00.3215102" startTime="2025-08-25T21:32:27.9940640+01:00" endTime="2025-08-25T21:32:27.9940642+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="425b885c-9917-41af-956e-2da3e24cf8a0">
      <Output>
        <StdOut>Client 2: -1, 44ms&#xD;
Client 0: -1, 46ms&#xD;
Client 1: -1, 74ms&#xD;
Client 6: 0, 158ms&#xD;
Client 4: 0, 158ms&#xD;
Client 3: 0, 159ms&#xD;
Client 5: 0, 317ms&#xD;
Client 7: 0, 318ms</StdOut>
        <ErrorInfo>
          <Message>Expected successCount to be 8 because All concurrent requests must succeed, but found 5.</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 244&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="e3d86166-37a3-4628-bf8f-c734d1fe2153" testId="852d2a22-e4c5-db23-b204-eeb31211f60c" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;SPY&quot;, date: &quot;2024-01-19&quot;, description: &quot;weekly&quot;)" computerName="SONAKSHI" duration="00:00:00.1708883" startTime="2025-08-25T21:32:19.5499334+01:00" endTime="2025-08-25T21:32:19.5499337+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="e3d86166-37a3-4628-bf8f-c734d1fe2153" />
    <UnitTestResult executionId="348ebc08-bdcb-400c-904f-66d32b4ef96d" testId="498b763e-7b76-0e04-e368-31cf9aced6ba" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ForceKill_MustCleanupResources" computerName="SONAKSHI" duration="00:00:00.0130844" startTime="2025-08-25T21:32:44.6951433+01:00" endTime="2025-08-25T21:32:44.6951444+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="348ebc08-bdcb-400c-904f-66d32b4ef96d">
      <Output>
        <StdOut>Process 36444 terminated and cleaned up successfully</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7f5e952e-35ad-47f5-a954-614a04ab5d5b" testId="a3cc2a23-de32-b194-4da8-ac2edc918fbd" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.ColdStart_Performance_MustMeetBootstrapSLO" computerName="SONAKSHI" duration="00:00:05.5925801" startTime="2025-08-25T21:32:29.1514825+01:00" endTime="2025-08-25T21:32:29.1514828+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7f5e952e-35ad-47f5-a954-614a04ab5d5b">
      <Output>
        <StdOut>Cold Start Performance: Avg=131.2ms, Max=136ms</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f954e968-845b-4996-b25f-b7493873b727" testId="7c2f39fd-95d4-786a-c566-b77ae9fa6746" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError" computerName="SONAKSHI" duration="00:00:00.1800460" startTime="2025-08-25T21:32:17.2648925+01:00" endTime="2025-08-25T21:32:17.2648927+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f954e968-845b-4996-b25f-b7493873b727">
      <Output>
        <StdOut>Command: get-bars --symbol INVALID_SYMBOL_XYZ --from 2024-01-01 --to 2024-01-31&#xD;
Exit Code: 0&#xD;
Execution Time: 178ms&#xD;
Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"INVALID_SYMBOL_XYZ","granularity":"1m","from":"2024-01-01","to":"2024-01-31","bars":[]},"meta":{"count":0,"timestamp":"2025-08-25T20:32:17.226Z"}}</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 3 because data not found should return exit code 3, but found 0 (difference of -3).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 140&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="bc10fea9-ca31-4b81-9113-d0a984096327" testId="616857ce-c3bb-273a-3c6c-953b19c49f8b" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;SPY&quot;, date: &quot;2024-01-31&quot;, description: &quot;monthly&quot;)" computerName="SONAKSHI" duration="00:00:00.2313024" startTime="2025-08-25T21:32:19.3782210+01:00" endTime="2025-08-25T21:32:19.3782216+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="bc10fea9-ca31-4b81-9113-d0a984096327" />
    <UnitTestResult executionId="b908c538-6c1e-489b-b486-37dd654cbb0e" testId="1660c8b5-3c0d-b313-cd84-8dbfedaee52e" testName="Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat" computerName="SONAKSHI" duration="00:00:09.9903136" startTime="2025-08-25T21:32:46.4997604+01:00" endTime="2025-08-25T21:32:46.4997609+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b908c538-6c1e-489b-b486-37dd654cbb0e">
      <Output>
        <StdOut>Connection attempt to stroll.history failed: The operation has timed out.&#xD;
Connection attempt to stroll.history.server failed: The operation has timed out.</StdOut>
        <ErrorInfo>
          <Message>System.InvalidOperationException : Could not connect to any IPC pipe</Message>
          <StackTrace>   at Stroll.History.Integrity.Tests.IpcContractTests.ConnectToIpcServer(Int32 timeoutMs) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 409&#xD;
   at Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs:line 269&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="5931cf57-7b38-4883-9cc0-032b9dd64569" testId="130227d6-949f-cd4f-6bff-8d4961f0ee9a" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: &quot;2024-01-31&quot;, description: &quot;monthly expiry&quot;)" computerName="SONAKSHI" duration="00:00:00.0508951" startTime="2025-08-25T21:32:17.3161288+01:00" endTime="2025-08-25T21:32:17.3161291+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="5931cf57-7b38-4883-9cc0-032b9dd64569">
      <Output>
        <StdOut>Command: get-options --symbol SPY --date 2024-01-31&#xD;
Exit Code: -1&#xD;
Execution Time: 49ms&#xD;
Output:</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because valid options request must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(String date, String description) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 164&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c647f251-64c4-46e2-80e6-88dfdcdd6aca" testId="b0cb56fa-2d51-d0d1-ff37-a047257de28f" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests" computerName="SONAKSHI" duration="00:00:01.6395469" startTime="2025-08-25T21:32:17.2720586+01:00" endTime="2025-08-25T21:32:17.2720589+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c647f251-64c4-46e2-80e6-88dfdcdd6aca">
      <Output>
        <ErrorInfo>
          <Message>Expected avgLatency to be less than or equal to 100.0 because Initialization should not severely impact response times, but found 195.8 (difference of 95.80000000000001).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 273&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="06aa8a9f-36c5-4944-bf5b-39e6257e1790" testId="67affca7-d2a3-f2c9-5a36-dcf803e169a1" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits" computerName="SONAKSHI" duration="00:00:05.4592389" startTime="2025-08-25T21:32:44.6824549+01:00" endTime="2025-08-25T21:32:44.6824552+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="06aa8a9f-36c5-4944-bf5b-39e6257e1790">
      <Output>
        <ErrorInfo>
          <Message>System.InvalidOperationException : Sequence contains no elements</Message>
          <StackTrace>   at System.Linq.ThrowHelper.ThrowNoElementsException()&#xD;
   at System.Linq.Enumerable.Average[TSource,TAccumulator,TResult](IEnumerable`1 source)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 176&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2718e1a2-163a-40a6-a926-6b8abac69170" testId="345169e6-3dc3-afa2-a0a8-9fb2f1d400d2" testName="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO" computerName="SONAKSHI" duration="00:00:02.2737274" startTime="2025-08-25T21:32:27.6723468+01:00" endTime="2025-08-25T21:32:27.6723469+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2718e1a2-163a-40a6-a926-6b8abac69170">
      <Output>
        <StdOut>Process Spawn: P50=127ms, P95=142ms</StdOut>
        <ErrorInfo>
          <Message>Expected p50 to be less than or equal to 3L because Process spawn P50 must be ≤3ms, but found 127L (difference of 124).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO() in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs:line 103&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="347d5b58-769f-4ce1-9a18-0c65f4ee7f0a" testId="02b1d2f1-3459-ba65-f8fa-b0b332fd1ac5" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;SPY&quot;)" computerName="SONAKSHI" duration="00:00:00.0518735" startTime="2025-08-25T21:32:17.3550102+01:00" endTime="2025-08-25T21:32:17.3550105+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="347d5b58-769f-4ce1-9a18-0c65f4ee7f0a">
      <Output>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because Data retrieval for SPY must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs:line 45&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1ccea3b8-5bdb-4ddf-bc54-8732ad4e214e" testId="a1abdd3e-f3c6-1c14-6064-4f2dd0d24d96" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;ERY&quot;)" computerName="SONAKSHI" duration="00:00:00.1952208" startTime="2025-08-25T21:32:18.5694413+01:00" endTime="2025-08-25T21:32:18.5694415+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ccea3b8-5bdb-4ddf-bc54-8732ad4e214e" />
    <UnitTestResult executionId="1665e1e6-348f-4719-be7b-b742e1ca6098" testId="070eb660-3594-4f33-e767-639f4867d099" testName="Stroll.History.Integrity.Tests.PerformanceRegressionTests.MemoryUsage_UnderLoad_MustNotExceedLimits" computerName="SONAKSHI" duration="00:00:06.1621620" startTime="2025-08-25T21:32:23.5584985+01:00" endTime="2025-08-25T21:32:23.5584988+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1665e1e6-348f-4719-be7b-b742e1ca6098">
      <Output>
        <StdOut>Memory Usage: Avg=2.6MB, Max=2MB</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="8296745e-38b1-414c-8993-b1f026129f61" testId="cf1ff64e-8e10-7ae6-a670-98faed7e8dbe" testName="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: &quot;2024-01-19&quot;, description: &quot;weekly expiry&quot;)" computerName="SONAKSHI" duration="00:00:00.0361768" startTime="2025-08-25T21:32:17.3536470+01:00" endTime="2025-08-25T21:32:17.3536483+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Failed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="8296745e-38b1-414c-8993-b1f026129f61">
      <Output>
        <StdOut>Command: get-options --symbol SPY --date 2024-01-19&#xD;
Exit Code: -1&#xD;
Execution Time: 34ms&#xD;
Output:</StdOut>
        <ErrorInfo>
          <Message>Expected result.ExitCode to be 0 because valid options request must succeed, but found -1 (difference of -1).</Message>
          <StackTrace>   at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
   at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
   at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
   at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
   at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
   at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(String date, String description) in C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs:line 164&#xD;
--- End of stack trace from previous location ---</StackTrace>
        </ErrorInfo>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6d099a11-99dd-42e6-98b3-a10cdbd1183c" testId="d5b7c5d1-908c-90c4-0c53-379ba6ea3959" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;ERX&quot;)" computerName="SONAKSHI" duration="00:00:00.1652047" startTime="2025-08-25T21:32:19.1464200+01:00" endTime="2025-08-25T21:32:19.1464204+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6d099a11-99dd-42e6-98b3-a10cdbd1183c" />
    <UnitTestResult executionId="10357c7c-1e75-4432-84d1-2f331d5f3c45" testId="77a4f4e8-bb0c-c2d6-caf9-3aaae7127b49" testName="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;USO&quot;)" computerName="SONAKSHI" duration="00:00:00.1562495" startTime="2025-08-25T21:32:18.9809292+01:00" endTime="2025-08-25T21:32:18.9809299+01:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="10357c7c-1e75-4432-84d1-2f331d5f3c45" />
  </Results>
  <TestDefinitions>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d1046a89-ce94-3c20-cf55-15cedf399078">
      <Execution id="425b885c-9917-41af-956e-2da3e24cf8a0" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ConcurrentConnections_MustHandleMultipleClients" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-01&quot;, to: &quot;2024-01-07&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_week&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="ab2b2a05-ed37-b373-0697-8aa7b21d8d5d">
      <Execution id="2cd157df-9a29-4fa9-b2be-23d56b02f148" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetBarsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="f7a3ab53-c7e7-2087-a390-a9470fdf08f5">
      <Execution id="6986a19a-e6c2-469f-9a53-b704088309da" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetBars_MonthlyRange_MustMeetPerformanceSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="345169e6-3dc3-afa2-a0a8-9fb2f1d400d2">
      <Execution id="2718e1a2-163a-40a6-a926-6b8abac69170" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ProcessSpawn_Overhead_MustMeetPerformanceSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.GracefulShutdown_MustCompleteWithinTimeout" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a0f2be1f-6a20-f77c-a432-095aad79f209">
      <Execution id="d4930b1a-4746-4314-b8e2-60eccd33765c" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="GracefulShutdown_MustCompleteWithinTimeout" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="7c2f39fd-95d4-786a-c566-b77ae9fa6746">
      <Execution id="f954e968-845b-4996-b25f-b7493873b727" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetBars_InvalidSymbol_MustReturnStandardError" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="f12d43d6-09ca-94cc-3081-2e6b5b79a2f5">
      <Execution id="611abf0b-6eab-4b61-88b6-6ddd0a3af963" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcConnection_Persistence_MustReuseConnectionsEfficiently" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="b0cb56fa-2d51-d0d1-ff37-a047257de28f">
      <Execution id="c647f251-64c4-46e2-80e6-88dfdcdd6aca" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="InitializationOrder_MustCompleteBeforeAcceptingRequests" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-15&quot;, to: &quot;2024-01-15&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_day&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d9d5e9cb-812b-39a5-915f-74231facbaf3">
      <Execution id="37d80733-4e00-4cfb-b3c1-b1707671d1d9" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetBarsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;XLE&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="7d24f10f-08c2-6db5-865f-0317ad547814">
      <Execution id="2fc4b2aa-1e0f-433f-b412-61b08bf6f4be" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;ERX&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d5b7c5d1-908c-90c4-0c53-379ba6ea3959">
      <Execution id="6d099a11-99dd-42e6-98b3-a10cdbd1183c" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;UNG&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="c498f224-7d3c-0cf5-5186-95f77e5a2cd8">
      <Execution id="6bd66020-b09d-4009-8a7a-5337b948f5fd" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;OILY&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="547563c8-101e-3ed7-b3d3-ffeb50de455a">
      <Execution id="2b986b9d-3102-43e1-a6c7-e09bedb5079d" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="9720b5d8-629d-49df-67fd-acba0735f3a3">
      <Execution id="3b825078-a718-4ace-9bf7-bba812c19781" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;DRIP&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="73faff17-d744-8883-57fa-d6a3005947d4">
      <Execution id="326c2ea2-8437-471b-b859-0d5e75f52584" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ForceKill_MustCleanupResources" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="498b763e-7b76-0e04-e368-31cf9aced6ba">
      <Execution id="348ebc08-bdcb-400c-904f-66d32b4ef96d" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ForceKill_MustCleanupResources" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="bd89ac76-1178-a9a8-b539-d7abc58c5d5d">
      <Execution id="f59bf0a1-9c27-4526-83f1-e0def27efbf5" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;SPY&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a65e01be-e329-9ced-a231-8f240e9dbff3">
      <Execution id="f1fc9615-c0a4-4d69-b4d2-be532e4c3f97" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;QQQ&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="eee663c9-7edd-c938-7bf2-4a34517b3c51">
      <Execution id="112ccf3a-0e6f-40d7-8e09-6c42f6e553a4" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataQuality_OHLCV_MustSatisfyFinancialInvariants" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;XLE&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="dfe6ee38-021d-7fbf-62be-74dc8f7bd624">
      <Execution id="083ae491-cd3a-4492-aff3-180447bca6c6" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Performance_MustMeetLatencySLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="2fdfcb73-88ba-ce23-826c-6777399aa01c">
      <Execution id="bfa4ca8e-af6b-44f3-b0f1-107f797c1976" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcConnection_Performance_MustMeetLatencySLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;QQQ&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="2a98c4fa-8bce-0aac-f1e5-20629f4fcd20">
      <Execution id="51eb352b-f9a5-469c-8d11-fa67de94a5a1" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="c60bb786-dacb-4f91-d8c0-17001cfed7a7">
      <Execution id="c2c29812-ebee-4936-b40b-7e8c89f18d97" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_MustHandleInvalidArguments_WithStandardErrorFormat" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.MultiSymbol_ConsistentResponse_MustHaveSameSchema" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="34c2d878-9f9a-c3fb-f608-685427dd1ff8">
      <Execution id="43dc8777-59d7-46a7-9608-465290633b6b" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="MultiSymbol_ConsistentResponse_MustHaveSameSchema" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;USO&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d868ef31-8c21-5b32-9e1e-7ecb8735d5ce">
      <Execution id="a8cc9f40-3231-46b9-9b3c-9be6c397c990" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataQuality_OHLCV_MustSatisfyFinancialInvariants" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, date: &quot;2024-01-19&quot;, scenario: &quot;weekly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="8c252c2d-052d-8947-948e-0317943dbcb9">
      <Execution id="3b244819-6faa-4d58-a540-a9d3dbf6e8ec" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetOptionsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.LoadTest_ConcurrentRequests_MustMaintainThroughputSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="bf31a76f-3c4d-96bf-54e8-1fab0c1cb5d5">
      <Execution id="36c11cb7-ccbb-4b74-b60c-460b22949797" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="LoadTest_ConcurrentRequests_MustMaintainThroughputSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="46f4fb9a-9ec3-3575-6a3e-f54dfe0e0e6b">
      <Execution id="c2c1d8d1-fbe1-45ea-a1f4-500acc6080f2" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ErrorRecovery_TransientFailures_MustRecoverGracefully" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;SPY&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="02b1d2f1-3459-ba65-f8fa-b0b332fd1ac5">
      <Execution id="347d5b58-769f-4ce1-9a18-0c65f4ee7f0a" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataQuality_OHLCV_MustSatisfyFinancialInvariants" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: &quot;XLE&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="63daa1ce-c43b-f74b-dff2-ca8051321189">
      <Execution id="87a126f1-6a70-49a4-a16f-de9de6fa7fd9" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataQuality_OHLCV_MustSatisfyFinancialInvariants" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;ERY&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a1abdd3e-f3c6-1c14-6064-4f2dd0d24d96">
      <Execution id="1ccea3b8-5bdb-4ddf-bc54-8732ad4e214e" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;SPY&quot;, date: &quot;2024-01-31&quot;, description: &quot;monthly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="616857ce-c3bb-273a-3c6c-953b19c49f8b">
      <Execution id="bc10fea9-ca31-4b81-9113-d0a984096327" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OptionsData_Availability_MustProvideValidChains" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;GUSH&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="9013f874-8a4c-4c73-e79f-a509e61da1b6">
      <Execution id="844a3bbb-bdd3-48ff-9162-cb5829c34227" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, date: &quot;2024-01-31&quot;, scenario: &quot;monthly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="669a21aa-c949-333b-2581-d8d519a421f7">
      <Execution id="c526a6d1-3f94-4af4-9fc2-d1b513d825e4" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetOptionsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: &quot;USO&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="698150cf-a3bf-0a44-9fc6-9e4a7cd1afaf">
      <Execution id="f974e274-376d-4cdc-bad7-3208dd078deb" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="24742c7d-d023-969a-bdc2-2d3c3debc16b">
      <Execution id="6492df90-ba16-4d75-875d-8a04ea0473fd" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="LongTermData_Availability_MustSpanMultipleYears" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;OIH&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="9abd53b2-101b-f815-e8cf-0804376ff000">
      <Execution id="92a9e17e-42a3-49f5-b7d5-0a2067697de7" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;QQQ&quot;, date: &quot;2024-01-19&quot;, description: &quot;weekly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="6d82db8f-5e56-2998-5fc5-a4fc1c24ccd8">
      <Execution id="7035fcf9-3f89-4dbb-bd5a-2eb467937d15" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OptionsData_Availability_MustProvideValidChains" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;USO&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="77a4f4e8-bb0c-c2d6-caf9-3aaae7127b49">
      <Execution id="10357c7c-1e75-4432-84d1-2f331d5f3c45" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a97e8704-df43-aa55-d55e-cc7f9f54d62b">
      <Execution id="3546290e-1086-490c-ab6b-146b5ad30bf4" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetBars_SingleDay_MustMeetPerformanceSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Version_MustReturnValidVersionSchema" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="968fccda-0f7b-3d4a-0c3e-3ba8f27712a1">
      <Execution id="0837a8e2-e6f3-4bd9-9bb1-377e96878401" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_Version_MustReturnValidVersionSchema" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ColdStart_Performance_MustMeetBootstrapSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="21515c87-1674-a668-24cd-e7cf0b8b79a6">
      <Execution id="f0d78bfe-203d-4aba-8625-cda0d2800f9c" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ColdStart_Performance_MustMeetBootstrapSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;XOP&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="d50dac0e-a7de-09cc-da1c-bc348c29be5f">
      <Execution id="bc20ac5b-3722-4dce-8d4f-07c2dc004408" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: &quot;2024-01-31&quot;, description: &quot;monthly expiry&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="130227d6-949f-cd4f-6bff-8d4961f0ee9a">
      <Execution id="5931cf57-7b38-4883-9cc0-032b9dd64569" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetOptions_MustMeetPerformanceAndQualitySLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="0a60c8d7-ce2e-951c-8c65-0d1888537231">
      <Execution id="8226f5e2-3029-4ad6-a970-4cebfca5f5ad" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_DiscoverCommand_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="63e5e473-b665-c476-0652-077debdb9447">
      <Execution id="4cfe3169-f092-4b9d-99e7-53a1d7c791ec" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_Discover_MustReturnValidContractSchema" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="34d94d2d-122b-5143-8b16-e37fc2f5b7f3">
      <Execution id="5929dff5-89c4-40fe-839a-5a551a695335" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_Discover_MustReturnValidContractSchema" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: &quot;2024-01-19&quot;, description: &quot;weekly expiry&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="cf1ff64e-8e10-7ae6-a670-98faed7e8dbe">
      <Execution id="8296745e-38b1-414c-8993-b1f026129f61" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_GetOptions_MustMeetPerformanceAndQualitySLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: &quot;SPY&quot;, from: &quot;2024-01-01&quot;, to: &quot;2024-01-31&quot;, granularity: &quot;1d&quot;, scenario: &quot;single_month&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="b13f8a79-42f6-99db-717d-12f7ffb70858">
      <Execution id="6d44b228-138a-4d44-8395-85a3342a0f7e" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="PerformanceBaseline_GetBarsCommands_MustMaintainSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="f0453f9e-8f1b-6bc5-2f7d-f889f91dca59">
      <Execution id="3332179d-d380-4460-ac46-82b29e19ba91" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ContractValidationTests" name="CLI_ProviderStatus_MustReturnHealthInformation" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.ColdStart_Performance_MustMeetBootstrapSLO" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="a3cc2a23-de32-b194-4da8-ac2edc918fbd">
      <Execution id="7f5e952e-35ad-47f5-a954-614a04ab5d5b" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="ColdStart_Performance_MustMeetBootstrapSLO" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.PerformanceRegressionTests.MemoryUsage_UnderLoad_MustNotExceedLimits" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="070eb660-3594-4f33-e767-639f4867d099">
      <Execution id="1665e1e6-348f-4719-be7b-b742e1ca6098" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.PerformanceRegressionTests" name="MemoryUsage_UnderLoad_MustNotExceedLimits" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="b82280b4-dbf6-d42b-a3fb-284005534d07">
      <Execution id="7a200ebf-6dca-45e3-95a5-5a2f036bf6cb" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: &quot;BOIL&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="45ddda53-a0bf-e237-e92e-8d2bacc11893">
      <Execution id="c99155c8-18ef-444d-b1e6-b6c25b25a498" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OilEnergyData_Availability_MustBeAccessible" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.DataIntegrityTests.OptionsData_Availability_MustProvideValidChains(symbol: &quot;SPY&quot;, date: &quot;2024-01-19&quot;, description: &quot;weekly&quot;)" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="852d2a22-e4c5-db23-b204-eeb31211f60c">
      <Execution id="e3d86166-37a3-4628-bf8f-c734d1fe2153" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.DataIntegrityTests" name="OptionsData_Availability_MustProvideValidChains" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcServer_Startup_MustCreateNamedPipeWithStandardName" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="6ca5a343-28d2-988e-a3d1-0ac59578c058">
      <Execution id="77e82c02-f1b7-4627-96f6-223c10af7692" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcServer_Startup_MustCreateNamedPipeWithStandardName" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="67affca7-d2a3-f2c9-5a36-dcf803e169a1">
      <Execution id="06aa8a9f-36c5-4944-bf5b-39e6257e1790" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.ProcessLifecycleTests" name="ResourceLimits_UnderNormalLoad_MustNotExceedLimits" />
    </UnitTest>
    <UnitTest name="Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat" storage="c:\code\stroll\stroll.history\stroll.history.integrity.tests\bin\debug\net9.0\stroll.history.integrity.tests.dll" id="1660c8b5-3c0d-b313-cd84-8dbfedaee52e">
      <Execution id="b908c538-6c1e-489b-b486-37dd654cbb0e" />
      <TestMethod codeBase="C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\Stroll.History.Integrity.Tests.dll" adapterTypeName="executor://xunit/VsTestRunner2/netcoreapp" className="Stroll.History.Integrity.Tests.IpcContractTests" name="IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="669a21aa-c949-333b-2581-d8d519a421f7" executionId="c526a6d1-3f94-4af4-9fc2-d1b513d825e4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f12d43d6-09ca-94cc-3081-2e6b5b79a2f5" executionId="611abf0b-6eab-4b61-88b6-6ddd0a3af963" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34c2d878-9f9a-c3fb-f608-685427dd1ff8" executionId="43dc8777-59d7-46a7-9608-465290633b6b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d50dac0e-a7de-09cc-da1c-bc348c29be5f" executionId="bc20ac5b-3722-4dce-8d4f-07c2dc004408" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b82280b4-dbf6-d42b-a3fb-284005534d07" executionId="7a200ebf-6dca-45e3-95a5-5a2f036bf6cb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bd89ac76-1178-a9a8-b539-d7abc58c5d5d" executionId="f59bf0a1-9c27-4526-83f1-e0def27efbf5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6d82db8f-5e56-2998-5fc5-a4fc1c24ccd8" executionId="7035fcf9-3f89-4dbb-bd5a-2eb467937d15" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9abd53b2-101b-f815-e8cf-0804376ff000" executionId="92a9e17e-42a3-49f5-b7d5-0a2067697de7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="24742c7d-d023-969a-bdc2-2d3c3debc16b" executionId="6492df90-ba16-4d75-875d-8a04ea0473fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46f4fb9a-9ec3-3575-6a3e-f54dfe0e0e6b" executionId="c2c1d8d1-fbe1-45ea-a1f4-500acc6080f2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d868ef31-8c21-5b32-9e1e-7ecb8735d5ce" executionId="a8cc9f40-3231-46b9-9b3c-9be6c397c990" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a0f2be1f-6a20-f77c-a432-095aad79f209" executionId="d4930b1a-4746-4314-b8e2-60eccd33765c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="73faff17-d744-8883-57fa-d6a3005947d4" executionId="326c2ea2-8437-471b-b859-0d5e75f52584" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2a98c4fa-8bce-0aac-f1e5-20629f4fcd20" executionId="51eb352b-f9a5-469c-8d11-fa67de94a5a1" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="45ddda53-a0bf-e237-e92e-8d2bacc11893" executionId="c99155c8-18ef-444d-b1e6-b6c25b25a498" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="0a60c8d7-ce2e-951c-8c65-0d1888537231" executionId="8226f5e2-3029-4ad6-a970-4cebfca5f5ad" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a97e8704-df43-aa55-d55e-cc7f9f54d62b" executionId="3546290e-1086-490c-ab6b-146b5ad30bf4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9720b5d8-629d-49df-67fd-acba0735f3a3" executionId="3b825078-a718-4ace-9bf7-bba812c19781" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8c252c2d-052d-8947-948e-0317943dbcb9" executionId="3b244819-6faa-4d58-a540-a9d3dbf6e8ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="bf31a76f-3c4d-96bf-54e8-1fab0c1cb5d5" executionId="36c11cb7-ccbb-4b74-b60c-460b22949797" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7d24f10f-08c2-6db5-865f-0317ad547814" executionId="2fc4b2aa-1e0f-433f-b412-61b08bf6f4be" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="dfe6ee38-021d-7fbf-62be-74dc8f7bd624" executionId="083ae491-cd3a-4492-aff3-180447bca6c6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9013f874-8a4c-4c73-e79f-a509e61da1b6" executionId="844a3bbb-bdd3-48ff-9162-cb5829c34227" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ab2b2a05-ed37-b373-0697-8aa7b21d8d5d" executionId="2cd157df-9a29-4fa9-b2be-23d56b02f148" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="968fccda-0f7b-3d4a-0c3e-3ba8f27712a1" executionId="0837a8e2-e6f3-4bd9-9bb1-377e96878401" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="698150cf-a3bf-0a44-9fc6-9e4a7cd1afaf" executionId="f974e274-376d-4cdc-bad7-3208dd078deb" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="6ca5a343-28d2-988e-a3d1-0ac59578c058" executionId="77e82c02-f1b7-4627-96f6-223c10af7692" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b13f8a79-42f6-99db-717d-12f7ffb70858" executionId="6d44b228-138a-4d44-8395-85a3342a0f7e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c498f224-7d3c-0cf5-5186-95f77e5a2cd8" executionId="6bd66020-b09d-4009-8a7a-5337b948f5fd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63daa1ce-c43b-f74b-dff2-ca8051321189" executionId="87a126f1-6a70-49a4-a16f-de9de6fa7fd9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c60bb786-dacb-4f91-d8c0-17001cfed7a7" executionId="c2c29812-ebee-4936-b40b-7e8c89f18d97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f0453f9e-8f1b-6bc5-2f7d-f889f91dca59" executionId="3332179d-d380-4460-ac46-82b29e19ba91" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a65e01be-e329-9ced-a231-8f240e9dbff3" executionId="f1fc9615-c0a4-4d69-b4d2-be532e4c3f97" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="34d94d2d-122b-5143-8b16-e37fc2f5b7f3" executionId="5929dff5-89c4-40fe-839a-5a551a695335" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="547563c8-101e-3ed7-b3d3-ffeb50de455a" executionId="2b986b9d-3102-43e1-a6c7-e09bedb5079d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="eee663c9-7edd-c938-7bf2-4a34517b3c51" executionId="112ccf3a-0e6f-40d7-8e09-6c42f6e553a4" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f7a3ab53-c7e7-2087-a390-a9470fdf08f5" executionId="6986a19a-e6c2-469f-9a53-b704088309da" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="63e5e473-b665-c476-0652-077debdb9447" executionId="4cfe3169-f092-4b9d-99e7-53a1d7c791ec" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21515c87-1674-a668-24cd-e7cf0b8b79a6" executionId="f0d78bfe-203d-4aba-8625-cda0d2800f9c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d9d5e9cb-812b-39a5-915f-74231facbaf3" executionId="37d80733-4e00-4cfb-b3c1-b1707671d1d9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2fdfcb73-88ba-ce23-826c-6777399aa01c" executionId="bfa4ca8e-af6b-44f3-b0f1-107f797c1976" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d1046a89-ce94-3c20-cf55-15cedf399078" executionId="425b885c-9917-41af-956e-2da3e24cf8a0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="852d2a22-e4c5-db23-b204-eeb31211f60c" executionId="e3d86166-37a3-4628-bf8f-c734d1fe2153" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="498b763e-7b76-0e04-e368-31cf9aced6ba" executionId="348ebc08-bdcb-400c-904f-66d32b4ef96d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a3cc2a23-de32-b194-4da8-ac2edc918fbd" executionId="7f5e952e-35ad-47f5-a954-614a04ab5d5b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7c2f39fd-95d4-786a-c566-b77ae9fa6746" executionId="f954e968-845b-4996-b25f-b7493873b727" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="616857ce-c3bb-273a-3c6c-953b19c49f8b" executionId="bc10fea9-ca31-4b81-9113-d0a984096327" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1660c8b5-3c0d-b313-cd84-8dbfedaee52e" executionId="b908c538-6c1e-489b-b486-37dd654cbb0e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="130227d6-949f-cd4f-6bff-8d4961f0ee9a" executionId="5931cf57-7b38-4883-9cc0-032b9dd64569" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0cb56fa-2d51-d0d1-ff37-a047257de28f" executionId="c647f251-64c4-46e2-80e6-88dfdcdd6aca" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="67affca7-d2a3-f2c9-5a36-dcf803e169a1" executionId="06aa8a9f-36c5-4944-bf5b-39e6257e1790" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="345169e6-3dc3-afa2-a0a8-9fb2f1d400d2" executionId="2718e1a2-163a-40a6-a926-6b8abac69170" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="02b1d2f1-3459-ba65-f8fa-b0b332fd1ac5" executionId="347d5b58-769f-4ce1-9a18-0c65f4ee7f0a" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="a1abdd3e-f3c6-1c14-6064-4f2dd0d24d96" executionId="1ccea3b8-5bdb-4ddf-bc54-8732ad4e214e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="070eb660-3594-4f33-e767-639f4867d099" executionId="1665e1e6-348f-4719-be7b-b742e1ca6098" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="cf1ff64e-8e10-7ae6-a670-98faed7e8dbe" executionId="8296745e-38b1-414c-8993-b1f026129f61" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="d5b7c5d1-908c-90c4-0c53-379ba6ea3959" executionId="6d099a11-99dd-42e6-98b3-a10cdbd1183c" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="77a4f4e8-bb0c-c2d6-caf9-3aaae7127b49" executionId="10357c7c-1e75-4432-84d1-2f331d5f3c45" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Failed">
    <Counters total="58" executed="58" passed="23" failed="35" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>[xUnit.net 00:00:00.00] xUnit.net VSTest Adapter v2.8.2+699d445a1a (64-bit .NET 9.0.8)&#xD;
[xUnit.net 00:00:00.06]   Discovering: Stroll.History.Integrity.Tests&#xD;
[xUnit.net 00:00:00.10]   Discovered:  Stroll.History.Integrity.Tests&#xD;
[xUnit.net 00:00:00.10]   Starting:    Stroll.History.Integrity.Tests&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      IpcTestFixture initializing...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      Ensuring Stroll.History IPC server is running...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        ProcessId: stroll.history.ipc&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Executable: dotnet&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Pipe Name: stroll.history.server&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Arguments: run --project Stroll.Historical.csproj -- ipc-server&#xD;
[xUnit.net 00:00:00.20]       Expected result.ExitCode to be 0 because valid get-bars request must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:00.20]       Stack Trace:&#xD;
[xUnit.net 00:00:00.20]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:00.20]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:00.20]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:00.20]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:00.20]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:00.20]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:00.20]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:00.20]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(93,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO()&#xD;
[xUnit.net 00:00:00.20]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:00.20]       Output:&#xD;
[xUnit.net 00:00:00.20]         Command: get-bars --symbol SPY --from 2024-01-15 --to 2024-01-15 --granularity 1d&#xD;
[xUnit.net 00:00:00.20]         Exit Code: -1&#xD;
[xUnit.net 00:00:00.20]         Execution Time: 13ms&#xD;
[xUnit.net 00:00:00.20]         Output: &#xD;
[xUnit.net 00:00:00.34]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:00.34]       Stack Trace:&#xD;
[xUnit.net 00:00:00.34]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:00.34]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:00.34]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(319,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;LongTermData_Availability_MustSpanMultipleYears&gt;b__10_0(JsonElement b)&#xD;
[xUnit.net 00:00:00.34]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:00.34]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:00.34]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.34]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:00.34]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.34]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(319,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears()&#xD;
[xUnit.net 00:00:00.34]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:00.55]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:00.55]       Stack Trace:&#xD;
[xUnit.net 00:00:00.55]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:00.55]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:00.55]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(149,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b)&#xD;
[xUnit.net 00:00:00.55]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:00.55]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:00.55]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.55]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:00.55]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.55]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(149,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol)&#xD;
[xUnit.net 00:00:00.55]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:00.75]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:00.75]       Stack Trace:&#xD;
[xUnit.net 00:00:00.75]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:00.75]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:00.75]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(149,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b)&#xD;
[xUnit.net 00:00:00.75]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:00.75]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:00.75]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.75]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:00.75]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.75]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(149,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol)&#xD;
[xUnit.net 00:00:00.75]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:00.95]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:00.95]       Stack Trace:&#xD;
[xUnit.net 00:00:00.95]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:00.95]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:00.95]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(149,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b)&#xD;
[xUnit.net 00:00:00.95]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:00.95]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:00.95]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.95]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:00.95]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:00.95]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(149,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol)&#xD;
[xUnit.net 00:00:00.95]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.07]       System.Text.Json.JsonException : 'i' is an invalid start of a value. Path: $ | LineNumber: 0 | BytePositionInLine: 0.&#xD;
[xUnit.net 00:00:01.07]       ---- System.Text.Json.JsonReaderException : 'i' is an invalid start of a value. LineNumber: 0 | BytePositionInLine: 0.&#xD;
[xUnit.net 00:00:01.07]       Stack Trace:&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.ThrowHelper.ReThrowWithPath(ReadStack&amp; state, JsonReaderException ex)&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.Serialization.JsonConverter`1.ReadCore(Utf8JsonReader&amp; reader, T&amp; value, JsonSerializerOptions options, ReadStack&amp; state)&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.Serialization.Metadata.JsonTypeInfo`1.Deserialize(Utf8JsonReader&amp; reader, ReadStack&amp; state)&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.JsonSerializer.ReadFromSpan[TValue](ReadOnlySpan`1 utf8Json, JsonTypeInfo`1 jsonTypeInfo, Nullable`1 actualByteCount)&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.JsonSerializer.ReadFromSpan[TValue](ReadOnlySpan`1 json, JsonTypeInfo`1 jsonTypeInfo)&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.JsonSerializer.Deserialize[TValue](String json, JsonSerializerOptions options)&#xD;
[xUnit.net 00:00:01.07]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(193,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation()&#xD;
[xUnit.net 00:00:01.07]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.07]         ----- Inner Stack Trace -----&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.ThrowHelper.ThrowJsonReaderException(Utf8JsonReader&amp; json, ExceptionResource resource, Byte nextByte, ReadOnlySpan`1 bytes)&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.Utf8JsonReader.ConsumeValue(Byte marker)&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.Utf8JsonReader.ReadFirstToken(Byte first)&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.Utf8JsonReader.ReadSingleSegment()&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.Utf8JsonReader.Read()&#xD;
[xUnit.net 00:00:01.07]            at System.Text.Json.Serialization.JsonConverter`1.ReadCore(Utf8JsonReader&amp; reader, T&amp; value, JsonSerializerOptions options, ReadStack&amp; state)&#xD;
[xUnit.net 00:00:01.07]       Output:&#xD;
[xUnit.net 00:00:01.07]         Command: provider-status&#xD;
[xUnit.net 00:00:01.07]         Exit Code: 0&#xD;
[xUnit.net 00:00:01.07]         Execution Time: 543ms&#xD;
[xUnit.net 00:00:01.07]         Output: info: Stroll.Historical.DataAcquisitionEngine[0]&#xD;
[xUnit.net 00:00:01.07]               Added Local Historical Data provider&#xD;
[xUnit.net 00:00:01.07]         info: Stroll.Historical.DataAcquisitionEngine[0]&#xD;
[xUnit.net 00:00:01.07]               Added Yahoo Finance provider&#xD;
[xUnit.net 00:00:01.07]         ?? Data Provider Status:&#xD;
[xUnit.net 00:00:01.07]         &#xD;
[xUnit.net 00:00:01.07]         ? ?? Local Historical Data (Priority: 0)&#xD;
[xUnit.net 00:00:01.07]            Available: True&#xD;
[xUnit.net 00:00:01.07]            Healthy: False&#xD;
[xUnit.net 00:00:01.07]            Response Time: 3ms&#xD;
[xUnit.net 00:00:01.07]            Rate Limit: 2147483647/2147483647 per minute&#xD;
[xUnit.net 00:00:01.07]         &#xD;
[xUnit.net 00:00:01.07]         ? ?? Yahoo Finance (Priority: 1)&#xD;
[xUnit.net 00:00:01.07]            Available: True&#xD;
[xUnit.net 00:00:01.07]            Healthy: False&#xD;
[xUnit.net 00:00:01.07]            Response Time: 275ms&#xD;
[xUnit.net 00:00:01.07]            Rate Limit: 30/30 per minute&#xD;
[xUnit.net 00:00:01.07]         &#xD;
[xUnit.net 00:00:01.07]         &#xD;
[xUnit.net 00:00:01.16]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.16]       Stack Trace:&#xD;
[xUnit.net 00:00:01.16]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.16]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.16]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(149,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.&lt;&gt;c.&lt;DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps&gt;b__6_0(JsonElement b)&#xD;
[xUnit.net 00:00:01.16]            at System.Linq.Enumerable.ListSelectIterator`2.Fill(ReadOnlySpan`1 source, Span`1 destination, Func`2 func)&#xD;
[xUnit.net 00:00:01.16]            at System.Linq.Enumerable.ListSelectIterator`2.ToArray()&#xD;
[xUnit.net 00:00:01.16]            at System.Linq.Enumerable.ToArray[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.16]            at System.Linq.Enumerable.OrderedIterator`1.ToList()&#xD;
[xUnit.net 00:00:01.16]            at System.Linq.Enumerable.ToList[TSource](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:01.16]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(149,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(String symbol)&#xD;
[xUnit.net 00:00:01.16]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.38]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.38]       Stack Trace:&#xD;
[xUnit.net 00:00:01.38]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.38]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.38]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(66,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol)&#xD;
[xUnit.net 00:00:01.38]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.58]       Expected result.ExitCode to be 2 because invalid arguments should return exit code 2, but found 64 (difference of 62).&#xD;
[xUnit.net 00:00:01.58]       Stack Trace:&#xD;
[xUnit.net 00:00:01.58]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.58]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.58]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.58]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.58]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.58]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.58]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.58]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(216,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat()&#xD;
[xUnit.net 00:00:01.58]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.58]       Output:&#xD;
[xUnit.net 00:00:01.58]         Command: invalid-command --badarg value&#xD;
[xUnit.net 00:00:01.58]         Exit Code: 64&#xD;
[xUnit.net 00:00:01.58]         Execution Time: 248ms&#xD;
[xUnit.net 00:00:01.58]         Output: &#xD;
[xUnit.net 00:00:01.58]         Error: {&#xD;
[xUnit.net 00:00:01.58]           "schema": "stroll.history.v1",&#xD;
[xUnit.net 00:00:01.58]           "ok": false,&#xD;
[xUnit.net 00:00:01.58]           "error": {&#xD;
[xUnit.net 00:00:01.58]             "code": "USAGE",&#xD;
[xUnit.net 00:00:01.58]             "message": "unknown command \u0027invalid-command\u0027",&#xD;
[xUnit.net 00:00:01.58]             "hint": "try: stroll.history discover"&#xD;
[xUnit.net 00:00:01.58]           }&#xD;
[xUnit.net 00:00:01.58]         }&#xD;
[xUnit.net 00:00:01.58]         &#xD;
[xUnit.net 00:00:01.64]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.64]       Stack Trace:&#xD;
[xUnit.net 00:00:01.64]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.64]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.64]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(66,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol)&#xD;
[xUnit.net 00:00:01.64]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.76]       Expected result.ExitCode to be 3 because data not found should return exit code 3, but found 0 (difference of -3).&#xD;
[xUnit.net 00:00:01.76]       Stack Trace:&#xD;
[xUnit.net 00:00:01.76]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.76]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.76]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.76]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.76]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.76]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.76]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.76]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(140,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError()&#xD;
[xUnit.net 00:00:01.76]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.76]       Output:&#xD;
[xUnit.net 00:00:01.76]         Command: get-bars --symbol INVALID_SYMBOL_XYZ --from 2024-01-01 --to 2024-01-31&#xD;
[xUnit.net 00:00:01.76]         Exit Code: 0&#xD;
[xUnit.net 00:00:01.76]         Execution Time: 178ms&#xD;
[xUnit.net 00:00:01.76]         Output: {"schema":"stroll.history.v1","ok":true,"data":{"symbol":"INVALID_SYMBOL_XYZ","granularity":"1m","from":"2024-01-01","to":"2024-01-31","bars":[]},"meta":{"count":0,"timestamp":"2025-08-25T20:32:17.226Z"}}&#xD;
[xUnit.net 00:00:01.76]         &#xD;
[xUnit.net 00:00:01.77]       Expected avgLatency to be less than or equal to 100.0 because Initialization should not severely impact response times, but found 195.8 (difference of 95.80000000000001).&#xD;
[xUnit.net 00:00:01.77]       Stack Trace:&#xD;
[xUnit.net 00:00:01.77]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.77]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.77]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.77]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.77]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.77]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.77]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.77]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.77]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(273,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests()&#xD;
[xUnit.net 00:00:01.77]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.80]       System.FormatException : One of the identified items was in an invalid format.&#xD;
[xUnit.net 00:00:01.80]       Stack Trace:&#xD;
[xUnit.net 00:00:01.80]            at System.Text.Json.ThrowHelper.ThrowFormatException()&#xD;
[xUnit.net 00:00:01.80]            at System.Text.Json.JsonElement.GetDateTime()&#xD;
[xUnit.net 00:00:01.80]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(66,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol)&#xD;
[xUnit.net 00:00:01.80]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.81]       Expected result.ExitCode to be 0 because valid options request must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:01.81]       Stack Trace:&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.81]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(164,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(String date, String description)&#xD;
[xUnit.net 00:00:01.81]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.81]       Output:&#xD;
[xUnit.net 00:00:01.81]         Command: get-options --symbol SPY --date 2024-01-31&#xD;
[xUnit.net 00:00:01.81]         Exit Code: -1&#xD;
[xUnit.net 00:00:01.81]         Execution Time: 49ms&#xD;
[xUnit.net 00:00:01.81]         Output: &#xD;
[xUnit.net 00:00:01.81]       Expected result.ExitCode to be 0 because discover must succeed for baseline measurement, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:01.81]       Stack Trace:&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.81]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.81]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(52,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO()&#xD;
[xUnit.net 00:00:01.81]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.85]       Expected result.ExitCode to be 0 because valid options request must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:01.85]       Stack Trace:&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.85]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ContractValidationTests.cs(164,0): at Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(String date, String description)&#xD;
[xUnit.net 00:00:01.85]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.85]       Output:&#xD;
[xUnit.net 00:00:01.85]         Command: get-options --symbol SPY --date 2024-01-19&#xD;
[xUnit.net 00:00:01.85]         Exit Code: -1&#xD;
[xUnit.net 00:00:01.85]         Execution Time: 34ms&#xD;
[xUnit.net 00:00:01.85]         Output: &#xD;
[xUnit.net 00:00:01.85]       Expected result.ExitCode to be 0 because get-bars single_month must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:01.85]       Stack Trace:&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.85]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(96,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario)&#xD;
[xUnit.net 00:00:01.85]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.85]       Expected result.ExitCode to be 0 because Data retrieval for SPY must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:01.85]       Stack Trace:&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.85]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.85]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(45,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(String symbol)&#xD;
[xUnit.net 00:00:01.85]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.86]       Expected result.ExitCode to be one of {0, 3} because XOP should either succeed (0) or report no data (3), not fail completely, but found -1.&#xD;
[xUnit.net 00:00:01.86]       Stack Trace:&#xD;
[xUnit.net 00:00:01.86]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.86]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.86]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.86]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.86]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.86]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.86]            at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.86]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(179,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol)&#xD;
[xUnit.net 00:00:01.86]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.86]       Output:&#xD;
[xUnit.net 00:00:01.86]         Oil/Energy symbol XOP not available: Exit=-1, Output=&#xD;
[xUnit.net 00:00:01.88]       Expected result.ExitCode to be 0 because get-bars single_week must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:01.88]       Stack Trace:&#xD;
[xUnit.net 00:00:01.88]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.88]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.88]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.88]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.88]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.88]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.88]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.88]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(96,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario)&#xD;
[xUnit.net 00:00:01.88]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.89]       Expected result.ExitCode to be 0 because get-bars single_day must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:00:01.89]       Stack Trace:&#xD;
[xUnit.net 00:00:01.89]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.89]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.89]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.89]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.89]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.89]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.89]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.89]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(96,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(String symbol, String from, String to, String granularity, String scenario)&#xD;
[xUnit.net 00:00:01.89]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.91]       Expected result.ExitCode to be one of {0, 3} because OIH should either succeed (0) or report no data (3), not fail completely, but found -1.&#xD;
[xUnit.net 00:00:01.91]       Stack Trace:&#xD;
[xUnit.net 00:00:01.91]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:01.91]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:01.91]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:01.91]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.91]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:01.91]            at FluentAssertions.Execution.AssertionScope.FailWith(String message, Object[] args)&#xD;
[xUnit.net 00:00:01.91]            at FluentAssertions.Numeric.NumericAssertions`2.BeOneOf(IEnumerable`1 validValues, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:01.91]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\DataIntegrityTests.cs(179,0): at Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(String symbol)&#xD;
[xUnit.net 00:00:01.91]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:01.91]       Output:&#xD;
[xUnit.net 00:00:01.91]         Oil/Energy symbol OIH not available: Exit=-1, Output=&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      IpcTestFixture initialization completed successfully&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:00:12.17]       Expected p50 to be less than or equal to 3L because Process spawn P50 must be ≤3ms, but found 127L (difference of 124).&#xD;
[xUnit.net 00:00:12.17]       Stack Trace:&#xD;
[xUnit.net 00:00:12.17]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:12.17]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:12.17]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:12.17]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:12.17]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:12.17]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:12.17]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(103,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO()&#xD;
[xUnit.net 00:00:12.17]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:12.17]       Output:&#xD;
[xUnit.net 00:00:12.17]         Process Spawn: P50=127ms, P95=142ms&#xD;
[xUnit.net 00:00:12.32]       System.InvalidOperationException : Could not connect to any IPC pipe&#xD;
[xUnit.net 00:00:12.32]       Stack Trace:&#xD;
[xUnit.net 00:00:12.33]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(409,0): at Stroll.History.Integrity.Tests.IpcContractTests.ConnectToIpcServer(Int32 timeoutMs)&#xD;
[xUnit.net 00:00:12.33]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(123,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Performance_MustMeetLatencySLO()&#xD;
[xUnit.net 00:00:12.33]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:12.33]       Output:&#xD;
[xUnit.net 00:00:12.33]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:00:12.33]         Connection attempt to stroll.history.server failed: The operation has timed out.&#xD;
[xUnit.net 00:00:12.49]       Expected successCount to be 8 because All concurrent requests must succeed, but found 5.&#xD;
[xUnit.net 00:00:12.49]       Stack Trace:&#xD;
[xUnit.net 00:00:12.49]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:12.49]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:12.49]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:12.49]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:12.49]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:12.49]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(244,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients()&#xD;
[xUnit.net 00:00:12.49]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:12.49]       Output:&#xD;
[xUnit.net 00:00:12.49]         Client 2: -1, 44ms&#xD;
[xUnit.net 00:00:12.49]         Client 0: -1, 46ms&#xD;
[xUnit.net 00:00:12.49]         Client 1: -1, 74ms&#xD;
[xUnit.net 00:00:12.49]         Client 6: 0, 158ms&#xD;
[xUnit.net 00:00:12.49]         Client 4: 0, 158ms&#xD;
[xUnit.net 00:00:12.49]         Client 3: 0, 159ms&#xD;
[xUnit.net 00:00:12.49]         Client 5: 0, 317ms&#xD;
[xUnit.net 00:00:12.49]         Client 7: 0, 318ms&#xD;
\u001b[38;5;9m  _   _   ____                        _                       ____  \u001b[0m            &#xD;
\u001b[38;5;9m | \ | | | __ )    ___    _ __ ___   | |__     ___   _ __    | ___| \u001b[0m            &#xD;
\u001b[38;5;9m |  \| | |  _ \   / _ \  | '_ ` _ \  | '_ \   / _ \ | '__|   |___ \ \u001b[0m            &#xD;
\u001b[38;5;9m | |\  | | |_) | | (_) | | | | | | | | |_) | |  __/ | |       ___) |\u001b[0m            &#xD;
\u001b[38;5;9m |_| \_| |____/   \___/  |_| |_| |_| |_.__/   \___| |_|      |____/ \u001b[0m            &#xD;
\u001b[38;5;9m                                                                    \u001b[0m            &#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] NBomber \u001b[38;5;10m"5.1.0"\u001b[0m started a new session: \u001b[38;5;10m"2025-08-25_20.32.15_session_59c4d35d"\u001b[0m&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] NBomber started as single node&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] License validation....&#xD;
21:32:29 [\u001b[38;5;11mWRN\u001b[0m] THIS VERSION IS FREE ONLY FOR PERSONAL USE. You can't use it for an &#xD;
organization.&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] Reports folder: \u001b[38;5;10m"C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\r\u001b[0m&#xD;
\u001b[38;5;10meports\2025-08-25_20.32.15_session_59c4d35d"\u001b[0m&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] Plugins: no plugins were loaded&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] Reporting sinks: no reporting sinks were loaded&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] Starting init...&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] Target scenarios: \u001b[38;5;10m"concurrent_get_bars"\u001b[0m&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] Init finished&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] Starting warm up...&#xD;
21:32:29 [\u001b[38;5;39mINF\u001b[0m] Warm up for scenarios: \u001b[38;5;10m"concurrent_get_bars"\u001b[0m&#xD;
warn: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server not responsive, restarting...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      Ensuring Stroll.History IPC server is running...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        ProcessId: stroll.history.ipc&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Executable: dotnet&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Pipe Name: stroll.history.server&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Arguments: run --project Stroll.Historical.csproj -- ipc-server&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:00:23.72]       Expected avgLatency to be less than or equal to 50.0 because Average latency must recover to &lt;50ms, but found 560.6666666666666 (difference of 510.66666666666663).&#xD;
[xUnit.net 00:00:23.72]       Stack Trace:&#xD;
[xUnit.net 00:00:23.72]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:00:23.72]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:00:23.72]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:00:23.72]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:00:23.72]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessThanOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:23.72]            at FluentAssertions.Numeric.NumericAssertions`2.BeLessOrEqualTo(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:00:23.72]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(215,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully()&#xD;
[xUnit.net 00:00:23.72]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:23.72]       Output:&#xD;
[xUnit.net 00:00:23.72]         Error Recovery: Success Rate=90.00%, Avg Latency=560.7ms&#xD;
[xUnit.net 00:00:29.18]       System.InvalidOperationException : Sequence contains no elements&#xD;
[xUnit.net 00:00:29.18]       Stack Trace:&#xD;
[xUnit.net 00:00:29.18]            at System.Linq.ThrowHelper.ThrowNoElementsException()&#xD;
[xUnit.net 00:00:29.18]            at System.Linq.Enumerable.Average[TSource,TAccumulator,TResult](IEnumerable`1 source)&#xD;
[xUnit.net 00:00:29.18]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\ProcessLifecycleTests.cs(176,0): at Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits()&#xD;
[xUnit.net 00:00:29.18]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:31.00]       System.InvalidOperationException : Could not connect to any IPC pipe&#xD;
[xUnit.net 00:00:31.00]       Stack Trace:&#xD;
[xUnit.net 00:00:31.00]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(409,0): at Stroll.History.Integrity.Tests.IpcContractTests.ConnectToIpcServer(Int32 timeoutMs)&#xD;
[xUnit.net 00:00:31.00]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(269,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat()&#xD;
[xUnit.net 00:00:31.00]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:31.00]       Output:&#xD;
[xUnit.net 00:00:31.00]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:00:31.00]         Connection attempt to stroll.history.server failed: The operation has timed out.&#xD;
warn: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server not responsive, restarting...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      Ensuring Stroll.History IPC server is running...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        ProcessId: stroll.history.ipc&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Executable: dotnet&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Pipe Name: stroll.history.server&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
        Arguments: run --project Stroll.Historical.csproj -- ipc-server&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:00:43.94]       System.IO.IOException : Pipe is broken.&#xD;
[xUnit.net 00:00:43.94]       Stack Trace:&#xD;
[xUnit.net 00:00:43.94]            at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
[xUnit.net 00:00:43.94]            at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
[xUnit.net 00:00:43.94]            at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
[xUnit.net 00:00:43.94]            at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
[xUnit.net 00:00:43.94]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(419,0): at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs)&#xD;
[xUnit.net 00:00:43.94]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(321,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses()&#xD;
[xUnit.net 00:00:43.94]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:43.94]       Output:&#xD;
[xUnit.net 00:00:43.94]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
21:33:00 [\u001b[38;5;39mINF\u001b[0m] Starting bombing...&#xD;
[xUnit.net 00:00:48.94]       System.IO.IOException : Pipe is broken.&#xD;
[xUnit.net 00:00:48.94]       Stack Trace:&#xD;
[xUnit.net 00:00:48.94]            at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
[xUnit.net 00:00:48.94]            at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
[xUnit.net 00:00:48.94]            at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
[xUnit.net 00:00:48.94]            at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
[xUnit.net 00:00:48.94]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(419,0): at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs)&#xD;
[xUnit.net 00:00:48.94]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(246,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently()&#xD;
[xUnit.net 00:00:48.94]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:48.94]       Output:&#xD;
[xUnit.net 00:00:48.94]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:00:53.94]       System.IO.IOException : Pipe is broken.&#xD;
[xUnit.net 00:00:53.94]       Stack Trace:&#xD;
[xUnit.net 00:00:53.94]            at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
[xUnit.net 00:00:53.94]            at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
[xUnit.net 00:00:53.94]            at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
[xUnit.net 00:00:53.94]            at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
[xUnit.net 00:00:53.94]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(419,0): at Stroll.History.Integrity.Tests.IpcContractTests.SendIpcRequest(NamedPipeClientStream client, Object request, Int32 timeoutMs)&#xD;
[xUnit.net 00:00:53.94]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(361,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle()&#xD;
[xUnit.net 00:00:53.94]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:00:53.94]       Output:&#xD;
[xUnit.net 00:00:53.94]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:01:04.03]       System.InvalidOperationException : Sequence contains no elements&#xD;
[xUnit.net 00:01:04.03]       Stack Trace:&#xD;
[xUnit.net 00:01:04.03]            at System.Linq.ThrowHelper.ThrowNoElementsException()&#xD;
[xUnit.net 00:01:04.03]            at System.Linq.Enumerable.Average[TSource,TSelector,TAccumulator,TResult](IEnumerable`1 source, Func`2 selector)&#xD;
[xUnit.net 00:01:04.03]            at System.Linq.Enumerable.Average[TSource](IEnumerable`1 source, Func`2 selector)&#xD;
[xUnit.net 00:01:04.03]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(215,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections()&#xD;
[xUnit.net 00:01:04.03]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:04.03]       Output:&#xD;
[xUnit.net 00:01:04.03]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:04.03]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:04.03]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:04.03]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:04.03]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:04.03]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:04.03]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:04.03]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:04.03]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:04.03]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:04.03]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:04.03]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:04.03]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:04.03]         Client connection failed: Pipe is broken.&#xD;
[xUnit.net 00:01:04.03]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
[xUnit.net 00:01:04.03]         Client connection failed: Pipe is broken.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
[xUnit.net 00:01:09.06]       System.IO.IOException : Pipe is broken.&#xD;
[xUnit.net 00:01:09.06]       Stack Trace:&#xD;
[xUnit.net 00:01:09.06]            at System.IO.Pipes.PipeStream.WriteCore(ReadOnlySpan`1 buffer)&#xD;
[xUnit.net 00:01:09.06]            at System.IO.Pipes.PipeStream.&lt;&gt;c.&lt;AsyncOverSyncWrite&gt;b__78_0(ValueTuple`2 s)&#xD;
[xUnit.net 00:01:09.06]            at System.Threading.AsyncOverSyncWithIoCancellation.InvokeAsync[TState](Action`1 action, TState state, CancellationToken cancellationToken)&#xD;
[xUnit.net 00:01:09.06]            at System.Runtime.CompilerServices.PoolingAsyncValueTaskMethodBuilder`1.StateMachineBox`1.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)&#xD;
[xUnit.net 00:01:09.06]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\IpcContractTests.cs(88,0): at Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat()&#xD;
[xUnit.net 00:01:09.06]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:09.06]       Output:&#xD;
[xUnit.net 00:01:09.06]         Connection attempt to stroll.history failed: The operation has timed out.&#xD;
info: Stroll.History.Integrity.Tests.IpcContractTests[0]&#xD;
      IPC server is ready for test&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      IpcTestFixture disposing...&#xD;
info: Stroll.History.Integrity.Tests.IpcTestFixture[0]&#xD;
      IpcTestFixture disposed successfully&#xD;
21:33:34 [\u001b[38;5;39mINF\u001b[0m] Stopping scenarios...&#xD;
21:33:34 [\u001b[38;5;39mINF\u001b[0m] Calculating final statistics...&#xD;
���������������������������������� test info �����������������������������������&#xD;
test suite: \u001b[38;5;10mnbomber_default_test_suite_name\u001b[0m&#xD;
test name: \u001b[38;5;10mnbomber_default_test_name\u001b[0m&#xD;
session id: \u001b[38;5;10m2025-08-25_20.32.15_session_59c4d35d\u001b[0m&#xD;
�������������������������������� scenario stats ��������������������������������&#xD;
scenario: \u001b[38;5;10mconcurrent_get_bars\u001b[0m&#xD;
  - ok count: \u001b[38;5;10m1500\u001b[0m&#xD;
  - fail count: \u001b[38;5;9m0\u001b[0m&#xD;
  - all data: \u001b[38;5;10m0\u001b[0m MB&#xD;
  - duration: \u001b[38;5;10m00:00:30\u001b[0m&#xD;
load simulations: &#xD;
  - \u001b[38;5;10minject\u001b[0m, rate: \u001b[38;5;10m50\u001b[0m, interval: \u001b[38;5;10m00:00:01\u001b[0m, during: \u001b[38;5;10m00:00:30\u001b[0m&#xD;
������������������������������������������������������������������������������Ŀ&#xD;
�               step � ok stats                                                �&#xD;
������������������������������������������������������������������������������Ĵ&#xD;
�               name � \u001b[38;5;39mglobal information\u001b[0m                                      �&#xD;
�      request count � all = \u001b[38;5;10m1500\u001b[0m, ok = \u001b[38;5;10m1500\u001b[0m, RPS = \u001b[38;5;10m50\u001b[0m                         �&#xD;
�            latency � min = \u001b[38;5;10m117.35\u001b[0m, mean = \u001b[38;5;10m213.69\u001b[0m, max = \u001b[38;5;10m564.59\u001b[0m, StdDev =     �&#xD;
�                    � \u001b[38;5;10m52.61\u001b[0m                                                   �&#xD;
� latency percentile � p50 = \u001b[38;5;10m203.52\u001b[0m, p75 = \u001b[38;5;10m237.82\u001b[0m, p95 = \u001b[38;5;10m292.35\u001b[0m, p99 = \u001b[38;5;10m408.06\u001b[0m  �&#xD;
��������������������������������������������������������������������������������&#xD;
21:33:35 [\u001b[38;5;39mINF\u001b[0m] Reports saved in folder: \u001b[38;5;10m"C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\r\u001b[0m&#xD;
\u001b[38;5;10meports\2025-08-25_20.32.15_session_59c4d35d"\u001b[0m&#xD;
21:33:35 [\u001b[38;5;11mWRN\u001b[0m] THIS VERSION IS FREE ONLY FOR PERSONAL USE. You can't use it for an &#xD;
organization.&#xD;
[xUnit.net 00:01:19.66]       System.ComponentModel.Win32Exception : An error occurred trying to start process 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0\..\..\..\..\Stroll.Historical\bin\Debug\net9.0\Stroll.Historical.exe' with working directory 'C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\bin\Debug\net9.0'. Access is denied.&#xD;
[xUnit.net 00:01:19.66]       Stack Trace:&#xD;
[xUnit.net 00:01:19.66]            at System.Diagnostics.Process.StartWithCreateProcess(ProcessStartInfo startInfo)&#xD;
[xUnit.net 00:01:19.66]            at System.Diagnostics.Process.Start()&#xD;
[xUnit.net 00:01:19.66]            at System.Diagnostics.Process.Start(ProcessStartInfo startInfo)&#xD;
[xUnit.net 00:01:19.66]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(331,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.ExecuteCliCommand(String arguments)&#xD;
[xUnit.net 00:01:19.66]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(139,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(String symbol, String date, String scenario)&#xD;
[xUnit.net 00:01:19.66]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:19.67]       Expected result.ExitCode to be 0 because get-options monthly must succeed, but found -1 (difference of -1).&#xD;
[xUnit.net 00:01:19.67]       Stack Trace:&#xD;
[xUnit.net 00:01:19.67]            at FluentAssertions.Execution.XUnit2TestFramework.Throw(String message)&#xD;
[xUnit.net 00:01:19.67]            at FluentAssertions.Execution.TestFrameworkProvider.Throw(String message)&#xD;
[xUnit.net 00:01:19.67]            at FluentAssertions.Execution.DefaultAssertionStrategy.HandleFailure(String message)&#xD;
[xUnit.net 00:01:19.67]            at FluentAssertions.Execution.AssertionScope.FailWith(Func`1 failReasonFunc)&#xD;
[xUnit.net 00:01:19.67]            at FluentAssertions.Numeric.NumericAssertions`2.Be(T expected, String because, Object[] becauseArgs)&#xD;
[xUnit.net 00:01:19.67]         C:\code\Stroll\Stroll.History\Stroll.History.Integrity.Tests\PerformanceRegressionTests.cs(142,0): at Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(String symbol, String date, String scenario)&#xD;
[xUnit.net 00:01:19.67]         --- End of stack trace from previous location ---&#xD;
[xUnit.net 00:01:19.68]   Finished:    Stroll.History.Integrity.Tests&#xD;
</StdOut>
    </Output>
    <RunInfos>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:15.7040335+01:00">
        <Text>[xUnit.net 00:00:00.20]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_SingleDay_MustMeetPerformanceSLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:15.8455727+01:00">
        <Text>[xUnit.net 00:00:00.34]     Stroll.History.Integrity.Tests.DataIntegrityTests.LongTermData_Availability_MustSpanMultipleYears [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:16.0515698+01:00">
        <Text>[xUnit.net 00:00:00.55]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: "SPY") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:16.2574595+01:00">
        <Text>[xUnit.net 00:00:00.75]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: "USO") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:16.4558077+01:00">
        <Text>[xUnit.net 00:00:00.95]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: "QQQ") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:16.5777137+01:00">
        <Text>[xUnit.net 00:00:01.07]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_ProviderStatus_MustReturnHealthInformation [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:16.6666459+01:00">
        <Text>[xUnit.net 00:00:01.16]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataCompleteness_TradingDays_MustNotHaveUnexpectedGaps(symbol: "XLE") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:16.8875160+01:00">
        <Text>[xUnit.net 00:00:01.38]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: "USO") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.0839002+01:00">
        <Text>[xUnit.net 00:00:01.58]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_MustHandleInvalidArguments_WithStandardErrorFormat [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.1401162+01:00">
        <Text>[xUnit.net 00:00:01.64]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: "QQQ") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.2644668+01:00">
        <Text>[xUnit.net 00:00:01.76]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetBars_InvalidSymbol_MustReturnStandardError [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.2717253+01:00">
        <Text>[xUnit.net 00:00:01.77]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.InitializationOrder_MustCompleteBeforeAcceptingRequests [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3015947+01:00">
        <Text>[xUnit.net 00:00:01.80]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: "XLE") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3159203+01:00">
        <Text>[xUnit.net 00:00:01.81]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: "2024-01-31", description: "monthly expiry") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3173026+01:00">
        <Text>[xUnit.net 00:00:01.81]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_DiscoverCommand_MustMaintainSLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3533038+01:00">
        <Text>[xUnit.net 00:00:01.85]     Stroll.History.Integrity.Tests.ContractValidationTests.CLI_GetOptions_MustMeetPerformanceAndQualitySLO(date: "2024-01-19", description: "weekly expiry") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3540992+01:00">
        <Text>[xUnit.net 00:00:01.85]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: "SPY", from: "2024-01-01", to: "2024-01-31", granularity: "1d", scenario: "single_month") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3547170+01:00">
        <Text>[xUnit.net 00:00:01.85]     Stroll.History.Integrity.Tests.DataIntegrityTests.DataQuality_OHLCV_MustSatisfyFinancialInvariants(symbol: "SPY") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3661572+01:00">
        <Text>[xUnit.net 00:00:01.86]     Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: "XOP") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3863416+01:00">
        <Text>[xUnit.net 00:00:01.88]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: "SPY", from: "2024-01-01", to: "2024-01-07", granularity: "1d", scenario: "single_week") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.3963079+01:00">
        <Text>[xUnit.net 00:00:01.89]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetBarsCommands_MustMaintainSLO(symbol: "SPY", from: "2024-01-15", to: "2024-01-15", granularity: "1d", scenario: "single_day") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:17.4135736+01:00">
        <Text>[xUnit.net 00:00:01.91]     Stroll.History.Integrity.Tests.DataIntegrityTests.OilEnergyData_Availability_MustBeAccessible(symbol: "OIH") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:27.6720183+01:00">
        <Text>[xUnit.net 00:00:12.17]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.ProcessSpawn_Overhead_MustMeetPerformanceSLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:27.8291019+01:00">
        <Text>[xUnit.net 00:00:12.32]     Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Performance_MustMeetLatencySLO [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:27.9938220+01:00">
        <Text>[xUnit.net 00:00:12.49]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.ConcurrentConnections_MustHandleMultipleClients [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:39.2224192+01:00">
        <Text>[xUnit.net 00:00:23.72]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.ErrorRecovery_TransientFailures_MustRecoverGracefully [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:44.6822091+01:00">
        <Text>[xUnit.net 00:00:29.18]     Stroll.History.Integrity.Tests.ProcessLifecycleTests.ResourceLimits_UnderNormalLoad_MustNotExceedLimits [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:46.4996634+01:00">
        <Text>[xUnit.net 00:00:31.00]     Stroll.History.Integrity.Tests.IpcContractTests.IpcErrorHandling_InvalidRequests_MustReturnStandardErrorFormat [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:32:59.4471322+01:00">
        <Text>[xUnit.net 00:00:43.94]     Stroll.History.Integrity.Tests.IpcContractTests.IpcLargePayload_DataTransfer_MustHandleMultiMegabyteResponses [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:33:04.4396274+01:00">
        <Text>[xUnit.net 00:00:48.94]     Stroll.History.Integrity.Tests.IpcContractTests.IpcConnection_Persistence_MustReuseConnectionsEfficiently [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:33:09.4395514+01:00">
        <Text>[xUnit.net 00:00:53.94]     Stroll.History.Integrity.Tests.IpcContractTests.IpcConnectionPool_ResourceManagement_MustHandleConnectionLifecycle [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:33:19.5308095+01:00">
        <Text>[xUnit.net 00:01:04.03]     Stroll.History.Integrity.Tests.IpcContractTests.IpcConcurrency_MultipleClients_MustHandleSimultaneousConnections [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:33:24.5680117+01:00">
        <Text>[xUnit.net 00:01:09.06]     Stroll.History.Integrity.Tests.IpcContractTests.IpcProtocol_BinaryFraming_MustUseLengthPrefixedFormat [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:33:35.1684220+01:00">
        <Text>[xUnit.net 00:01:19.66]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: "SPY", date: "2024-01-19", scenario: "weekly") [FAIL]</Text>
      </RunInfo>
      <RunInfo computerName="SONAKSHI" outcome="Error" timestamp="2025-08-25T21:33:35.1784707+01:00">
        <Text>[xUnit.net 00:01:19.67]     Stroll.History.Integrity.Tests.PerformanceRegressionTests.PerformanceBaseline_GetOptionsCommands_MustMaintainSLO(symbol: "SPY", date: "2024-01-31", scenario: "monthly") [FAIL]</Text>
      </RunInfo>
    </RunInfos>
  </ResultSummary>
</TestRun>